{
  "openapi": "3.0.3",
  "info": {
    "title": "Hetzner Cloud API",
    "description": "Copied from the official API documentation for the Public Hetzner Cloud.",
    "contact": {
      "url": "https://docs.hetzner.cloud/"
    },
    "version": "42f9f10-dirty"
  },
  "servers": [
    {
      "url": "https://api.hetzner.cloud/v1",
      "description": "Official production server"
    }
  ],
  "components": {
    "schemas": {
      "action": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Action"
          },
          "command": {
            "type": "string",
            "description": "Command executed in the Action"
          },
          "status": {
            "type": "string",
            "enum": [
              "error",
              "running",
              "success"
            ],
            "description": "Status of the Action"
          },
          "progress": {
            "type": "number",
            "description": "Progress of Action in percent"
          },
          "started": {
            "type": "string",
            "description": "Point in time when the Action was started (in ISO-8601 format)"
          },
          "finished": {
            "type": "string",
            "description": "Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.",
            "nullable": true
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resource"
            },
            "description": "Resources the Action relates to"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        },
        "required": [
          "id",
          "command",
          "status",
          "progress",
          "started",
          "finished",
          "resources",
          "error"
        ],
        "description": "Assign Action (only present if a Server was provided) | Action created by this call"
      },
      "add_route_to_network_request": {
        "$ref": "#/components/schemas/route"
      },
      "add_route_to_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "add_subnet_to_network_request": {
        "$ref": "#/components/schemas/subnet"
      },
      "add_subnet_to_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "assign_floating_ip_to_server_request": {
        "type": "object",
        "properties": {
          "server": {
            "type": "integer",
            "description": "ID of the Server the Floating IP shall be assigned to"
          }
        },
        "required": [
          "server"
        ]
      },
      "assign_floating_ip_to_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "attach_iso_to_server_request": {
        "type": "object",
        "properties": {
          "iso": {
            "type": "string",
            "description": "ID or name of ISO to attach to the Server as listed in GET `/isos`"
          }
        },
        "required": [
          "iso"
        ]
      },
      "attach_iso_to_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "attach_server_to_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing network to attach the Server to"
          },
          "ip": {
            "type": "string",
            "description": "IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address"
          },
          "alias_ips": {
            "type": "array",
            "description": "Additional IPs to be assigned to this Server",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "network"
        ]
      },
      "attach_server_to_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "attach_volume_to_server_request": {
        "type": "object",
        "properties": {
          "server": {
            "type": "integer",
            "description": "ID of the Server the Volume will be attached to"
          },
          "automount": {
            "type": "boolean",
            "description": "Auto-mount the Volume after attaching it"
          }
        },
        "required": [
          "server"
        ]
      },
      "attach_volume_to_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_alias_ips_of_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing Network already attached to the Server"
          },
          "alias_ips": {
            "type": "array",
            "description": "New alias IPs to set for this Server",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "network",
          "alias_ips"
        ]
      },
      "change_alias_ips_of_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_floating_ip_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Floating IP from being deleted"
          }
        }
      },
      "change_floating_ip_protection_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_image_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the snapshot from being deleted"
          }
        }
      },
      "change_image_protection_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_ip_range_of_network_request": {
        "type": "object",
        "properties": {
          "ip_range": {
            "type": "string",
            "description": "The new prefix for the whole Network"
          }
        },
        "required": [
          "ip_range"
        ]
      },
      "change_ip_range_of_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_network_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Network from being deleted"
          }
        }
      },
      "change_network_protection_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_reverse_dns_entry_for_floating_ip_request": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address for which to set the reverse DNS entry"
          },
          "dns_ptr": {
            "type": "string",
            "description": "Hostname to set as a reverse DNS PTR entry, will reset to original default value if `null`",
            "nullable": true
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ]
      },
      "change_reverse_dns_entry_for_floating_ip_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_reverse_dns_entry_for_this_server_request": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "Primary IP address for which the reverse DNS entry should be set"
          },
          "dns_ptr": {
            "type": "string",
            "description": "Hostname to set as a reverse DNS PTR entry, reset to original value if `null`",
            "nullable": true
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ]
      },
      "change_reverse_dns_entry_for_this_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_server_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Server from being deleted (currently delete and rebuild attribute needs to have the same value)"
          },
          "rebuild": {
            "type": "boolean",
            "description": "If true, prevents the Server from being rebuilt` (currently delete and rebuild attribute needs to have the same value)"
          }
        }
      },
      "change_server_protection_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_type_of_server_request": {
        "type": "object",
        "properties": {
          "upgrade_disk": {
            "type": "boolean",
            "description": "If false, do not upgrade the disk (this allows downgrading the Server type later)"
          },
          "server_type": {
            "type": "string",
            "description": "ID or name of Server type the Server should migrate to"
          }
        },
        "required": [
          "upgrade_disk",
          "server_type"
        ]
      },
      "change_type_of_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "change_volume_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Volume from being deleted"
          }
        }
      },
      "change_volume_protection_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "create_floating_ip_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Floating IP type"
          },
          "server": {
            "type": "integer",
            "description": "Server to assign the Floating IP to"
          },
          "home_location": {
            "type": "string",
            "description": "Home Location (routing is optimized for that Location). Only optional if Server argument is passed."
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          }
        },
        "required": [
          "type"
        ]
      },
      "create_floating_ip_response": {
        "type": "object",
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "floating_ip"
        ]
      },
      "create_image_from_server_request": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Image, will be auto-generated if not set"
          },
          "type": {
            "type": "string",
            "enum": [
              "backup",
              "snapshot"
            ],
            "description": "Type of Image to create (default: `snapshot`)"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          }
        }
      },
      "create_image_from_server_response": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "image",
          "action"
        ]
      },
      "create_network_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the network"
          },
          "ip_range": {
            "type": "string",
            "description": "IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask."
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "subnets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subnet"
            },
            "description": "Array of subnets allocated."
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/route"
            },
            "description": "Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1."
          }
        },
        "required": [
          "name",
          "ip_range"
        ]
      },
      "create_network_response": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "required": [
          "network"
        ]
      },
      "create_server_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)"
          },
          "server_type": {
            "type": "string",
            "description": "ID or name of the Server type this Server should be created with"
          },
          "start_after_create": {
            "type": "boolean",
            "description": "Start Server right after creation. Defaults to true."
          },
          "image": {
            "type": "string",
            "description": "ID or name of the Image the Server is created from"
          },
          "ssh_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "SSH key IDs or names which should be injected into the Server at creation time"
          },
          "volumes": {
            "type": "array",
            "description": "Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "networks": {
            "type": "array",
            "description": "Network IDs which should be attached to the Server private network interface at the creation time",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "user_data": {
            "type": "string",
            "description": "Cloud-Init user data to use during Server creation. This field is limited to 32KiB."
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "automount": {
            "type": "boolean",
            "description": "Auto-mount Volumes after attach"
          }
        },
        "required": [
          "name",
          "server_type",
          "image"
        ],
        "oneOf": [
          {
            "properties": {
              "location": {
                "type": "string",
                "description": "ID or name of Location to create Server in"
              }
            }
          },
          {
            "properties": {
              "datacenter": {
                "type": "string",
                "description": "ID or name of Datacenter to create Server in"
              }
            }
          }
        ]
      },
      "create_server_response": {
        "type": "object",
        "properties": {
          "server": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of Server"
              },
              "name": {
                "type": "string",
                "description": "Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)"
              },
              "status": {
                "type": "string",
                "enum": [
                  "deleting",
                  "initializing",
                  "migrating",
                  "off",
                  "rebuilding",
                  "running",
                  "starting",
                  "stopping"
                ],
                "description": "Status of the Server"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the Server was created (in ISO-8601 format)"
              },
              "public_net": {
                "$ref": "#/components/schemas/public_net"
              },
              "private_net": {
                "type": "array",
                "description": "Private networks information",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "server_type": {
                "$ref": "#/components/schemas/server_type"
              },
              "datacenter": {
                "$ref": "#/components/schemas/datacenter"
              },
              "image": {
                "$ref": "#/components/schemas/image_optional"
              },
              "iso": {
                "$ref": "#/components/schemas/iso_optional"
              },
              "rescue_enabled": {
                "type": "boolean",
                "description": "True if rescue mode is enabled: Server will then boot into rescue system on next reboot"
              },
              "locked": {
                "type": "boolean",
                "description": "True if Server has been locked and is not available to user"
              },
              "backup_window": {
                "type": "string",
                "description": "Time window (UTC) in which the backup will run, or null if the backups are not enabled",
                "nullable": true
              },
              "outgoing_traffic": {
                "type": "integer",
                "description": "Outbound Traffic for the current billing period in bytes",
                "nullable": true,
                "format": "int64"
              },
              "ingoing_traffic": {
                "type": "integer",
                "description": "Inbound Traffic for the current billing period in bytes",
                "nullable": true,
                "format": "int64"
              },
              "included_traffic": {
                "type": "integer",
                "description": "Free Traffic for the current billing period in bytes",
                "format": "int64"
              },
              "protection": {
                "$ref": "#/components/schemas/protection"
              },
              "labels": {
                "type": "object",
                "properties": {},
                "description": "User-defined labels (key-value pairs)"
              },
              "volumes": {
                "type": "array",
                "description": "IDs of Volumes assigned to this Server",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "required": [
              "id",
              "name",
              "status",
              "created",
              "public_net",
              "private_net",
              "server_type",
              "datacenter",
              "image",
              "iso",
              "rescue_enabled",
              "locked",
              "backup_window",
              "outgoing_traffic",
              "ingoing_traffic",
              "included_traffic",
              "protection",
              "labels"
            ]
          },
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "next_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          },
          "root_password": {
            "type": "string",
            "description": "Root password when no SSH keys have been specified",
            "nullable": true
          }
        },
        "required": [
          "server",
          "action",
          "next_actions",
          "root_password"
        ]
      },
      "create_ssh_key_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the SSH key"
          },
          "public_key": {
            "type": "string",
            "description": "Public key"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          }
        },
        "required": [
          "name",
          "public_key"
        ]
      },
      "create_ssh_key_response": {
        "type": "object",
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ]
      },
      "create_volume_request": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "Size of the Volume in GB"
          },
          "name": {
            "type": "string",
            "description": "Name of the volume"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "automount": {
            "type": "boolean",
            "description": "Auto-mount Volume after attach. `server` must be provided."
          },
          "format": {
            "type": "string",
            "description": "Format Volume after creation. One of: `xfs`, `ext4`"
          }
        },
        "required": [
          "size",
          "name"
        ],
        "oneOf": [
          {
            "properties": {
              "location": {
                "type": "string",
                "description": "Location to create the Volume in (can be omitted if Server is specified)"
              }
            }
          },
          {
            "properties": {
              "server": {
                "type": "number",
                "description": "Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)"
              }
            }
          }
        ]
      },
      "create_volume_response": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          },
          "action": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Action"
              },
              "command": {
                "type": "string",
                "description": "Command executed in the Action"
              },
              "status": {
                "type": "string",
                "enum": [
                  "error",
                  "running",
                  "success"
                ],
                "description": "Status of the Action"
              },
              "progress": {
                "type": "number",
                "description": "Progress of Action in percent"
              },
              "started": {
                "type": "string",
                "description": "Point in time when the Action was started (in ISO-8601 format)"
              },
              "finished": {
                "type": "string",
                "description": "Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.",
                "nullable": true
              },
              "resources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/resource"
                },
                "description": "Resources the Action relates to"
              },
              "error": {
                "$ref": "#/components/schemas/error"
              }
            },
            "required": [
              "id",
              "command",
              "status",
              "progress",
              "started",
              "finished",
              "resources",
              "error"
            ],
            "additionalProperties": false
          },
          "next_actions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "volume",
          "action",
          "next_actions"
        ]
      },
      "created_from": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Server the Image was created from"
          },
          "name": {
            "type": "string",
            "description": "Server name at the time the Image was created"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "Information about the Server the Image was created from",
        "nullable": true
      },
      "datacenter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Datacenter"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Datacenter"
          },
          "description": {
            "type": "string",
            "description": "Description of the Datacenter"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "server_types": {
            "type": "object",
            "properties": {
              "supported": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of Server types that are supported in the Datacenter"
              },
              "available": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of Server types that are supported and for which the Datacenter has enough resources left"
              },
              "available_for_migration": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of Server types that are supported and for which the Datacenter has enough resources left"
              }
            },
            "required": [
              "supported",
              "available",
              "available_for_migration"
            ],
            "description": "The Server types the Datacenter can handle"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "location",
          "server_types"
        ],
        "description": "Datacenter this Server is located at"
      },
      "delete_route_from_network_request": {
        "$ref": "#/components/schemas/route"
      },
      "delete_route_from_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "delete_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "delete_subnet_from_network_request": {
        "type": "object",
        "properties": {
          "ip_range": {
            "type": "string",
            "description": "IP range of subnet to delete"
          }
        },
        "required": [
          "ip_range"
        ]
      },
      "delete_subnet_from_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "detach_iso_from_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "detach_server_from_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing network to detach the Server from"
          }
        },
        "required": [
          "network"
        ]
      },
      "detach_server_from_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "detach_volume_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "disable_backups_for_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "disable_rescue_mode_for_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "dns_ptr": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "Single IPv4 or IPv6 address | Single IPv6 address of this Server for which the reverse DNS entry has been set up"
          },
          "dns_ptr": {
            "type": "string",
            "description": "DNS pointer for the specific IP address"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ]
      },
      "enable_and_configure_backups_for_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "enable_rescue_mode_for_server_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "freebsd64",
              "linux32",
              "linux64"
            ],
            "description": "Type of rescue system to boot (default: `linux64`)"
          },
          "ssh_keys": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of SSH key IDs which should be injected into the rescue system. Only available for types: `linux64` and `linux32`."
          }
        }
      },
      "enable_rescue_mode_for_server_response": {
        "type": "object",
        "properties": {
          "root_password": {
            "type": "string",
            "description": "Root Password for Server once it gets booted in rescue mode"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Fixed machine readable code"
          },
          "message": {
            "type": "string",
            "description": "Humanized error message"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "description": "Error message for the Action if error occurred, otherwise null",
        "nullable": true
      },
      "floating_ip": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Floating IP"
          },
          "name": {
            "type": "string",
            "description": "Unique name of the Floating IP"
          },
          "description": {
            "type": "string",
            "description": "Description of the Floating IP",
            "nullable": true
          },
          "ip": {
            "type": "string",
            "description": "IP address of the Floating IP"
          },
          "type": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Type of the Floating IP"
          },
          "server": {
            "type": "integer",
            "description": "ID of the Server the Floating IP is assigned to, null if it is not assigned at all",
            "nullable": true
          },
          "dns_ptr": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dns_ptr"
            },
            "description": "Array of reverse DNS entries"
          },
          "home_location": {
            "$ref": "#/components/schemas/location"
          },
          "blocked": {
            "type": "boolean",
            "description": "Whether the IP is blocked"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Floating IP from being deleted"
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Floating IP"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Floating IP was created (in ISO-8601 format)"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "ip",
          "type",
          "server",
          "dns_ptr",
          "home_location",
          "blocked",
          "protection",
          "labels",
          "created"
        ]
      },
      "get_action_for_floating_ip_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "get_action_for_image_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "get_action_for_network_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "get_action_for_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "get_action_for_volume_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "get_action_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "get_datacenter_response": {
        "type": "object",
        "properties": {
          "datacenter": {
            "$ref": "#/components/schemas/datacenter"
          }
        },
        "required": [
          "datacenter"
        ]
      },
      "get_image_response": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          }
        },
        "required": [
          "image"
        ]
      },
      "get_iso_response": {
        "type": "object",
        "properties": {
          "iso": {
            "$ref": "#/components/schemas/iso"
          }
        },
        "required": [
          "iso"
        ]
      },
      "get_location_response": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/location"
          }
        },
        "required": [
          "location"
        ]
      },
      "get_metrics_for_server_response": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "object",
            "properties": {
              "start": {
                "type": "string",
                "description": "Start of period of metrics reported (in ISO-8601 format)"
              },
              "end": {
                "type": "string",
                "description": "End of period of metrics reported (in ISO-8601 format)"
              },
              "step": {
                "type": "integer",
                "description": "Resolution of results in seconds."
              },
              "time_series": {
                "type": "object",
                "x-patternProperties": {
                  "": {
                    "type": "object",
                    "properties": {
                      "values": {
                        "type": "array",
                        "items": {
                          "type": "array"
                        },
                        "description": "Metrics Timestamps with values"
                      }
                    },
                    "required": [
                      "values"
                    ]
                  }
                },
                "additionalProperties": true
              }
            },
            "required": [
              "start",
              "end",
              "step",
              "time_series"
            ]
          }
        },
        "required": [
          "metrics"
        ]
      },
      "get_network_response": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "required": [
          "network"
        ]
      },
      "get_server_response": {
        "type": "object",
        "properties": {
          "server": {
            "$ref": "#/components/schemas/server"
          }
        },
        "required": [
          "server"
        ]
      },
      "get_server_type_response": {
        "type": "object",
        "properties": {
          "server_type": {
            "$ref": "#/components/schemas/server_type"
          }
        },
        "required": [
          "server_type"
        ]
      },
      "get_specific_floating_ip_response": {
        "type": "object",
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          }
        },
        "required": [
          "floating_ip"
        ]
      },
      "get_ssh_key_response": {
        "type": "object",
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ]
      },
      "get_volume_response": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          }
        },
        "required": [
          "volume"
        ]
      },
      "image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Image"
          },
          "type": {
            "type": "string",
            "enum": [
              "backup",
              "snapshot",
              "system"
            ],
            "description": "Type of the Image"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "creating"
            ],
            "description": "Whether the Image can be used or if it's still being created"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Image. This value is only set for system Images.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Image"
          },
          "image_size": {
            "type": "number",
            "description": "Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.",
            "nullable": true
          },
          "disk_size": {
            "type": "number",
            "description": "Size of the disk contained in the Image in GB"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Image was created (in ISO-8601 format)"
          },
          "created_from": {
            "$ref": "#/components/schemas/created_from"
          },
          "bound_to": {
            "type": "integer",
            "description": "ID of Server the Image is bound to. Only set for Images of type `backup`.",
            "nullable": true
          },
          "os_flavor": {
            "type": "string",
            "enum": [
              "centos",
              "debian",
              "fedora",
              "ubuntu",
              "unknown"
            ],
            "description": "Flavor of operating system contained in the Image"
          },
          "os_version": {
            "type": "string",
            "description": "Operating system version",
            "nullable": true
          },
          "rapid_deploy": {
            "type": "boolean",
            "description": "Indicates that rapid deploy of the Image is available"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the snapshot from being deleted"
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Image"
          },
          "deprecated": {
            "type": "string",
            "description": "Point in time when the Image is considered to be deprecated (in ISO-8601 format)",
            "nullable": true
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "name",
          "description",
          "image_size",
          "disk_size",
          "created",
          "created_from",
          "bound_to",
          "os_flavor",
          "os_version",
          "protection",
          "deprecated",
          "labels"
        ],
        "description": "The newly created Image"
      },
      "image_optional": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Image"
          },
          "type": {
            "type": "string",
            "enum": [
              "backup",
              "snapshot",
              "system"
            ],
            "description": "Type of the Image"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "creating"
            ],
            "description": "Whether the Image can be used or if it's still being created"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Image. This value is only set for system Images.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Image"
          },
          "image_size": {
            "type": "number",
            "description": "Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.",
            "nullable": true
          },
          "disk_size": {
            "type": "number",
            "description": "Size of the disk contained in the Image in GB"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Image was created (in ISO-8601 format)"
          },
          "created_from": {
            "$ref": "#/components/schemas/created_from"
          },
          "bound_to": {
            "type": "integer",
            "description": "ID of Server the Image is bound to. Only set for Images of type `backup`.",
            "nullable": true
          },
          "os_flavor": {
            "type": "string",
            "enum": [
              "centos",
              "debian",
              "fedora",
              "ubuntu",
              "unknown"
            ],
            "description": "Flavor of operating system contained in the Image"
          },
          "os_version": {
            "type": "string",
            "description": "Operating system version",
            "nullable": true
          },
          "rapid_deploy": {
            "type": "boolean",
            "description": "Indicates that rapid deploy of the Image is available"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the snapshot from being deleted"
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Image"
          },
          "deprecated": {
            "type": "string",
            "description": "Point in time when the Image is considered to be deprecated (in ISO-8601 format)",
            "nullable": true
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "name",
          "description",
          "image_size",
          "disk_size",
          "created",
          "created_from",
          "bound_to",
          "os_flavor",
          "os_version",
          "protection",
          "deprecated",
          "labels"
        ],
        "description": "Image this Server was created from",
        "nullable": true
      },
      "ipv4": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address (v4) of this Server"
          },
          "blocked": {
            "type": "boolean",
            "description": "If the IP is blocked by our anti abuse dept"
          },
          "dns_ptr": {
            "type": "string",
            "description": "Reverse DNS PTR entry for the IPv4 addresses of this Server"
          }
        },
        "required": [
          "ip",
          "blocked",
          "dns_ptr"
        ],
        "description": "IP address (v4) and its reverse DNS entry of this Server"
      },
      "ipv6": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address (v4) of this Server"
          },
          "blocked": {
            "type": "boolean",
            "description": "If the IP is blocked by our anti abuse dept"
          },
          "dns_ptr": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dns_ptr"
            },
            "description": "Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default",
            "nullable": true
          }
        },
        "required": [
          "ip",
          "blocked",
          "dns_ptr"
        ],
        "description": "IPv6 network assigned to this Server and its reverse DNS entry"
      },
      "iso": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the ISO"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the ISO. Only set for public ISOs",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the ISO"
          },
          "type": {
            "type": "string",
            "enum": [
              "private",
              "public"
            ],
            "description": "Type of the ISO"
          },
          "deprecated": {
            "type": "string",
            "description": "ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "deprecated"
        ]
      },
      "iso_optional": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the ISO"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the ISO. Only set for public ISOs",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the ISO"
          },
          "type": {
            "type": "string",
            "enum": [
              "private",
              "public"
            ],
            "description": "Type of the ISO"
          },
          "deprecated": {
            "type": "string",
            "description": "ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "deprecated"
        ],
        "description": "ISO Image that is attached to this Server. Null if no ISO is attached.",
        "nullable": true
      },
      "list_actions_for_floating_ip_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "list_actions_for_image_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "list_actions_for_network_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "list_actions_for_server_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "list_actions_for_volume_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "list_all_actions_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ]
      },
      "list_datacenters_response": {
        "type": "object",
        "properties": {
          "datacenters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datacenter"
            }
          },
          "recommendation": {
            "type": "integer",
            "description": "The Datacenter which is recommended to be used to create new Servers."
          }
        },
        "required": [
          "datacenters",
          "recommendation"
        ]
      },
      "list_floating_ips_response": {
        "type": "object",
        "properties": {
          "floating_ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/floating_ip"
            }
          }
        },
        "required": [
          "floating_ips"
        ]
      },
      "list_images_response": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/image"
            }
          }
        },
        "required": [
          "images"
        ]
      },
      "list_isos_response": {
        "type": "object",
        "properties": {
          "isos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iso"
            }
          }
        },
        "required": [
          "isos"
        ]
      },
      "list_locations_response": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/location"
            }
          }
        },
        "required": [
          "locations"
        ]
      },
      "list_networks_response": {
        "type": "object",
        "properties": {
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/network"
            }
          }
        },
        "required": [
          "networks"
        ]
      },
      "list_prices_response": {
        "type": "object",
        "properties": {
          "pricing": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency the returned prices are expressed in, coded according to ISO 4217"
              },
              "vat_rate": {
                "type": "string",
                "description": "The VAT rate used for calculating prices with VAT"
              },
              "image": {
                "type": "object",
                "properties": {
                  "price_per_gb_month": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_gb_month"
                ],
                "description": "The cost of Image per GB/month"
              },
              "floating_ip": {
                "type": "object",
                "properties": {
                  "price_monthly": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_monthly"
                ],
                "description": "The cost of one Floating IP per month"
              },
              "traffic": {
                "type": "object",
                "properties": {
                  "price_per_tb": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_tb"
                ],
                "description": "The cost of additional traffic per TB"
              },
              "server_backup": {
                "type": "object",
                "properties": {
                  "percentage": {
                    "type": "string",
                    "description": "Percentage by how much the base price will increase"
                  }
                },
                "required": [
                  "percentage"
                ],
                "description": "Will increase base Server costs by specific percentage"
              },
              "volume": {
                "type": "object",
                "properties": {
                  "price_per_gb_month": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_gb_month"
                ],
                "description": "The cost of Volume per GB/month"
              },
              "server_types": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of the Server type the price is for"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the Server type the price is for"
                    },
                    "prices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time"
                      },
                      "description": "Server type costs per Location"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "prices"
                  ]
                },
                "description": "Costs of Server types per Location and type"
              }
            },
            "required": [
              "currency",
              "vat_rate",
              "image",
              "floating_ip",
              "traffic",
              "server_backup",
              "volume",
              "server_types"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "pricing"
        ]
      },
      "list_server_types_response": {
        "type": "object",
        "properties": {
          "server_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server_type"
            }
          }
        },
        "required": [
          "server_types"
        ]
      },
      "list_servers_response": {
        "type": "object",
        "properties": {
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server"
            }
          }
        },
        "required": [
          "servers"
        ]
      },
      "list_ssh_keys_response": {
        "type": "object",
        "properties": {
          "ssh_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ssh_key"
            }
          }
        },
        "required": [
          "ssh_keys"
        ]
      },
      "list_volumes_response": {
        "type": "object",
        "properties": {
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volume"
            }
          }
        },
        "required": [
          "volumes"
        ]
      },
      "location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Location"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Location"
          },
          "description": {
            "type": "string",
            "description": "Description of the Location"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 code of the country the Location resides in"
          },
          "city": {
            "type": "string",
            "description": "City the Location is closest to"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of the city closest to the Location"
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the city closest to the Location"
          },
          "network_zone": {
            "type": "string",
            "description": "Name of network zone this Location resides in"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "country",
          "city",
          "latitude",
          "longitude",
          "network_zone"
        ],
        "description": "Location where the Datacenter resides in | Location the Floating IP was created in. Routing is optimized for this Location. | Location of the Volume. Volume can only be attached to Servers in the same Location."
      },
      "network": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Network"
          },
          "name": {
            "type": "string",
            "description": "Name of the Network"
          },
          "ip_range": {
            "type": "string",
            "description": "IPv4 prefix of the whole Network"
          },
          "subnets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subnet_with_gateway"
            },
            "description": "Array subnets allocated in this Network"
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/route"
            },
            "description": "Array of routes set in this Network"
          },
          "servers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of IDs of Servers attached to this Network"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Network from being deleted"
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Network"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Network was created (in ISO-8601 format)"
          }
        },
        "required": [
          "id",
          "name",
          "ip_range",
          "subnets",
          "routes",
          "servers",
          "protection",
          "labels",
          "created"
        ]
      },
      "power_off_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "power_on_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "price": {
        "type": "object",
        "properties": {
          "net": {
            "type": "string",
            "description": "Price without VAT",
            "format": "decimal"
          },
          "gross": {
            "type": "string",
            "description": "Price with VAT added",
            "format": "decimal"
          }
        },
        "required": [
          "net",
          "gross"
        ],
        "description": "Hourly costs for a Server type in this Location | Monthly costs for a Server type in this Location"
      },
      "price_per_time": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Name of the Location the price is for"
          },
          "price_hourly": {
            "$ref": "#/components/schemas/price"
          },
          "price_monthly": {
            "$ref": "#/components/schemas/price"
          }
        },
        "required": [
          "location",
          "price_hourly",
          "price_monthly"
        ]
      },
      "protection": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Server from being deleted"
          },
          "rebuild": {
            "type": "boolean",
            "description": "If true, prevents the Server from being rebuilt"
          }
        },
        "required": [
          "delete",
          "rebuild"
        ],
        "description": "Protection configuration for the Server"
      },
      "public_net": {
        "type": "object",
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          },
          "floating_ips": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of Floating IPs assigned to this Server"
          }
        },
        "required": [
          "ipv4",
          "ipv6",
          "floating_ips"
        ],
        "description": "Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`"
      },
      "rebuild_server_from_image_request": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "ID or name of Image to rebuilt from."
          }
        },
        "required": [
          "image"
        ]
      },
      "rebuild_server_from_image_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "root_password": {
            "type": "string",
            "description": "New root password when not using SSH keys",
            "nullable": true
          }
        },
        "required": [
          "action",
          "root_password"
        ]
      },
      "replace_floating_ip_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New unique name to set"
          },
          "description": {
            "type": "string",
            "description": "New Description to set"
          },
          "labels": {
            "type": "object",
            "properties": {
              "labelkey": {
                "type": "string"
              }
            },
            "description": "User-defined labels (key-value pairs)"
          }
        }
      },
      "replace_floating_ip_response": {
        "type": "object",
        "properties": {
          "floating_ip": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Floating IP"
              },
              "name": {
                "type": "string",
                "description": "Unique name of the Floating IP"
              },
              "description": {
                "type": "string",
                "description": "Description of the Floating IP",
                "nullable": true
              },
              "ip": {
                "type": "string",
                "description": "IP address of the Floating IP"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ipv4",
                  "ipv6"
                ],
                "description": "Type of the Floating IP"
              },
              "server": {
                "type": "integer",
                "description": "ID of the Server the Floating IP is assigned to, null if it is not assigned at all",
                "nullable": true
              },
              "dns_ptr": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/dns_ptr"
                },
                "description": "Array of reverse DNS entries"
              },
              "home_location": {
                "$ref": "#/components/schemas/location"
              },
              "blocked": {
                "type": "boolean",
                "description": "Whether the IP is blocked"
              },
              "protection": {
                "type": "object",
                "properties": {
                  "delete": {
                    "type": "boolean",
                    "description": "If true, prevents the Floating IP from being deleted"
                  }
                },
                "required": [
                  "delete"
                ],
                "description": "Protection configuration for the Floating IP"
              },
              "labels": {
                "type": "object",
                "properties": {
                  "labelkey": {
                    "type": "string",
                    "description": "New label"
                  }
                },
                "description": "User-defined labels (key-value pairs)"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the Floating IP was created (in ISO-8601 format)"
              }
            },
            "required": [
              "id",
              "name",
              "description",
              "ip",
              "type",
              "server",
              "dns_ptr",
              "home_location",
              "blocked",
              "protection",
              "labels",
              "created"
            ]
          }
        },
        "required": [
          "floating_ip"
        ]
      },
      "replace_image_request": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "New description of Image"
          },
          "type": {
            "type": "string",
            "enum": [
              "snapshot"
            ],
            "description": "Destination Image type to convert to"
          },
          "labels": {
            "type": "object",
            "properties": {
              "labelkey": {
                "type": "string"
              }
            },
            "description": "User-defined labels (key-value pairs)"
          }
        }
      },
      "replace_image_response": {
        "type": "object",
        "properties": {
          "image": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Image"
              },
              "type": {
                "type": "string",
                "enum": [
                  "backup",
                  "snapshot",
                  "system"
                ],
                "description": "Type of the Image"
              },
              "status": {
                "type": "string",
                "enum": [
                  "available",
                  "creating"
                ],
                "description": "Whether the Image can be used or if it's still being created"
              },
              "name": {
                "type": "string",
                "description": "Unique identifier of the Image. This value is only set for system Images.",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "Description of the Image"
              },
              "image_size": {
                "type": "number",
                "description": "Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.",
                "nullable": true
              },
              "disk_size": {
                "type": "number",
                "description": "Size of the disk contained in the Image in GB"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the Image was created (in ISO-8601 format)"
              },
              "created_from": {
                "$ref": "#/components/schemas/created_from"
              },
              "bound_to": {
                "type": "integer",
                "description": "ID of Server the Image is bound to. Only set for Images of type `backup`.",
                "nullable": true
              },
              "os_flavor": {
                "type": "string",
                "enum": [
                  "centos",
                  "debian",
                  "fedora",
                  "ubuntu",
                  "unknown"
                ],
                "description": "Flavor of operating system contained in the Image"
              },
              "os_version": {
                "type": "string",
                "description": "Operating system version",
                "nullable": true
              },
              "rapid_deploy": {
                "type": "boolean",
                "description": "Indicates that rapid deploy of the Image is available"
              },
              "protection": {
                "type": "object",
                "properties": {
                  "delete": {
                    "type": "boolean",
                    "description": "If true, prevents the snapshot from being deleted"
                  }
                },
                "required": [
                  "delete"
                ],
                "description": "Protection configuration for the Image"
              },
              "deprecated": {
                "type": "string",
                "description": "Point in time when the Image is considered to be deprecated (in ISO-8601 format)",
                "nullable": true
              },
              "labels": {
                "type": "object",
                "properties": {
                  "labelkey": {
                    "type": "string",
                    "description": "New label"
                  }
                },
                "description": "User-defined labels (key-value pairs)"
              }
            },
            "required": [
              "id",
              "type",
              "status",
              "name",
              "description",
              "image_size",
              "disk_size",
              "created",
              "created_from",
              "bound_to",
              "os_flavor",
              "os_version",
              "protection",
              "deprecated",
              "labels"
            ]
          }
        }
      },
      "replace_network_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New network name"
          },
          "labels": {
            "type": "object",
            "properties": {
              "labelkey": {
                "type": "string"
              }
            },
            "description": "User-defined labels (key-value pairs)"
          }
        }
      },
      "replace_network_response": {
        "type": "object",
        "properties": {
          "network": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Network"
              },
              "name": {
                "type": "string",
                "description": "Name of the network"
              },
              "ip_range": {
                "type": "string",
                "description": "IPv4 prefix of the whole Network"
              },
              "subnets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/subnet_with_gateway"
                },
                "description": "Array subnets allocated in this Network"
              },
              "routes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/route"
                },
                "description": "Array of routes set in this Network"
              },
              "servers": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Array of IDs of Servers attached to this Network"
              },
              "protection": {
                "type": "object",
                "properties": {
                  "delete": {
                    "type": "boolean",
                    "description": "If true, prevents the Network from being deleted"
                  }
                },
                "required": [
                  "delete"
                ],
                "description": "Protection configuration for the Network"
              },
              "labels": {
                "type": "object",
                "properties": {
                  "labelkey": {
                    "type": "string",
                    "description": "New label"
                  }
                },
                "description": "User-defined labels (key-value pairs)"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the Network was created (in ISO-8601 format)"
              }
            },
            "required": [
              "id",
              "name",
              "ip_range",
              "subnets",
              "routes",
              "servers",
              "protection",
              "created"
            ]
          }
        },
        "required": [
          "network"
        ]
      },
      "replace_server_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name to set"
          },
          "labels": {
            "type": "object",
            "properties": {
              "labelkey": {
                "type": "string"
              }
            },
            "description": "User-defined labels (key-value pairs)"
          }
        }
      },
      "replace_server_response": {
        "type": "object",
        "properties": {
          "server": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of Server"
              },
              "name": {
                "type": "string",
                "description": "Server name"
              },
              "status": {
                "type": "string",
                "enum": [
                  "deleting",
                  "initializing",
                  "migrating",
                  "off",
                  "rebuilding",
                  "running",
                  "starting",
                  "stopping",
                  "unknown"
                ],
                "description": "Status of the Server"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the Server was created (in ISO-8601 format)"
              },
              "public_net": {
                "$ref": "#/components/schemas/public_net"
              },
              "private_net": {
                "type": "array",
                "description": "Private networks information",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "server_type": {
                "$ref": "#/components/schemas/server_type"
              },
              "datacenter": {
                "$ref": "#/components/schemas/datacenter"
              },
              "image": {
                "$ref": "#/components/schemas/image_optional"
              },
              "iso": {
                "$ref": "#/components/schemas/iso_optional"
              },
              "rescue_enabled": {
                "type": "boolean",
                "description": "True if rescue mode is enabled: Server will then boot into rescue system on next reboot"
              },
              "locked": {
                "type": "boolean",
                "description": "True if Server has been locked and is not available to user"
              },
              "backup_window": {
                "type": "string",
                "description": "Time window (UTC) in which the backup will run, or null if the backups are not enabled",
                "nullable": true
              },
              "outgoing_traffic": {
                "type": "integer",
                "description": "Outbound Traffic for the current billing period in bytes",
                "nullable": true,
                "format": "int64"
              },
              "ingoing_traffic": {
                "type": "integer",
                "description": "Inbound Traffic for the current billing period in bytes",
                "nullable": true,
                "format": "int64"
              },
              "included_traffic": {
                "type": "integer",
                "description": "Free Traffic for the current billing period in bytes",
                "format": "int64"
              },
              "protection": {
                "$ref": "#/components/schemas/protection"
              },
              "labels": {
                "type": "object",
                "properties": {
                  "labelkey": {
                    "type": "string",
                    "description": "New label"
                  }
                },
                "description": "User-defined labels (key-value pairs)"
              },
              "volumes": {
                "type": "array",
                "description": "IDs of Volumes assigned to this Server",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "required": [
              "id",
              "name",
              "status",
              "created",
              "public_net",
              "private_net",
              "server_type",
              "datacenter",
              "image",
              "iso",
              "rescue_enabled",
              "locked",
              "backup_window",
              "outgoing_traffic",
              "ingoing_traffic",
              "included_traffic",
              "protection"
            ]
          }
        },
        "required": [
          "server"
        ]
      },
      "replace_ssh_key_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name Name to set"
          },
          "labels": {
            "type": "object",
            "properties": {
              "labelkey": {
                "type": "string"
              }
            },
            "description": "User-defined labels (key-value pairs)"
          }
        }
      },
      "replace_ssh_key_response": {
        "type": "object",
        "properties": {
          "ssh_key": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the SSH key"
              },
              "name": {
                "type": "string",
                "description": "Name of the SSH key"
              },
              "fingerprint": {
                "type": "string",
                "description": "Fingerprint of public key"
              },
              "public_key": {
                "type": "string",
                "description": "Public key"
              },
              "labels": {
                "type": "object",
                "properties": {
                  "labelkey": {
                    "type": "string",
                    "description": "New label"
                  }
                },
                "description": "User-defined labels (key-value pairs)"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the SSH key was created (in ISO-8601 format)"
              }
            },
            "required": [
              "id",
              "name",
              "fingerprint",
              "public_key",
              "created"
            ]
          }
        },
        "required": [
          "ssh_key"
        ]
      },
      "replace_volume_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New Volume name"
          },
          "labels": {
            "type": "object",
            "properties": {
              "labelkey": {
                "type": "string"
              }
            },
            "description": "User-defined labels (key-value pairs)"
          }
        },
        "required": [
          "name"
        ]
      },
      "replace_volume_response": {
        "type": "object",
        "properties": {
          "volume": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Volume"
              },
              "created": {
                "type": "string",
                "description": "Point in time when the Volume was created (in ISO-8601 format)"
              },
              "name": {
                "type": "string",
                "description": "Name of the Volume"
              },
              "server": {
                "type": "integer",
                "description": "ID of the Server the Volume is attached to, null if it is not attached at all",
                "nullable": true
              },
              "location": {
                "$ref": "#/components/schemas/location"
              },
              "size": {
                "type": "number",
                "description": "Size in GB of the Volume"
              },
              "linux_device": {
                "type": "string",
                "description": "Device path on the file system for the Volume"
              },
              "protection": {
                "type": "object",
                "properties": {
                  "delete": {
                    "type": "boolean",
                    "description": "If true, prevents the Volume from being deleted"
                  }
                },
                "required": [
                  "delete"
                ],
                "description": "Protection configuration for the Volume"
              },
              "labels": {
                "type": "object",
                "properties": {
                  "labelkey": {
                    "type": "string",
                    "description": "New label"
                  }
                },
                "description": "User-defined labels (key-value pairs)"
              },
              "status": {
                "type": "string",
                "enum": [
                  "available",
                  "creating"
                ],
                "description": "Current status of the Volume"
              },
              "format": {
                "type": "string",
                "description": "Filesystem of the Volume if formatted on creation, null if not formatted on creation",
                "nullable": true
              }
            },
            "required": [
              "id",
              "created",
              "name",
              "server",
              "location",
              "size",
              "linux_device",
              "protection",
              "status",
              "format"
            ]
          }
        },
        "required": [
          "volume"
        ]
      },
      "request_console_for_server_response": {
        "type": "object",
        "properties": {
          "wss_url": {
            "type": "string",
            "description": "URL of websocket proxy to use; this includes a token which is valid for a limited time only"
          },
          "password": {
            "type": "string",
            "description": "VNC password to use for this connection (this password only works in combination with a wss_url with valid token)"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "wss_url",
          "password",
          "action"
        ]
      },
      "reset_root_password_of_server_response": {
        "type": "object",
        "properties": {
          "root_password": {
            "type": "string",
            "description": "Password that will be set for this Server once the Action succeeds"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "reset_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "resize_volume_request": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "New Volume size in GB (must be greater than current size)"
          }
        },
        "required": [
          "size"
        ]
      },
      "resize_volume_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        }
      },
      "resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of resource referenced"
          },
          "type": {
            "type": "string",
            "description": "Type of resource referenced"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "route": {
        "type": "object",
        "properties": {
          "destination": {
            "type": "string",
            "description": "Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918."
          },
          "gateway": {
            "type": "string",
            "description": "Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers."
          }
        },
        "required": [
          "destination",
          "gateway"
        ]
      },
      "server": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of Server"
          },
          "name": {
            "type": "string",
            "description": "Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)"
          },
          "status": {
            "type": "string",
            "enum": [
              "deleting",
              "initializing",
              "migrating",
              "off",
              "rebuilding",
              "running",
              "starting",
              "stopping",
              "unknown"
            ],
            "description": "Status of the Server"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Server was created (in ISO-8601 format)"
          },
          "public_net": {
            "$ref": "#/components/schemas/public_net"
          },
          "private_net": {
            "type": "array",
            "description": "Private networks information",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "server_type": {
            "$ref": "#/components/schemas/server_type"
          },
          "datacenter": {
            "$ref": "#/components/schemas/datacenter"
          },
          "image": {
            "$ref": "#/components/schemas/image_optional"
          },
          "iso": {
            "$ref": "#/components/schemas/iso_optional"
          },
          "rescue_enabled": {
            "type": "boolean",
            "description": "True if rescue mode is enabled: Server will then boot into rescue system on next reboot"
          },
          "locked": {
            "type": "boolean",
            "description": "True if Server has been locked and is not available to user"
          },
          "backup_window": {
            "type": "string",
            "description": "Time window (UTC) in which the backup will run, or null if the backups are not enabled",
            "nullable": true
          },
          "outgoing_traffic": {
            "type": "integer",
            "description": "Outbound Traffic for the current billing period in bytes",
            "nullable": true,
            "format": "int64"
          },
          "ingoing_traffic": {
            "type": "integer",
            "description": "Inbound Traffic for the current billing period in bytes",
            "nullable": true,
            "format": "int64"
          },
          "included_traffic": {
            "type": "integer",
            "description": "Free Traffic for the current billing period in bytes",
            "format": "int64"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "volumes": {
            "type": "array",
            "description": "IDs of Volumes assigned to this Server",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "created",
          "public_net",
          "private_net",
          "server_type",
          "datacenter",
          "image",
          "iso",
          "rescue_enabled",
          "locked",
          "backup_window",
          "outgoing_traffic",
          "ingoing_traffic",
          "included_traffic",
          "protection",
          "labels"
        ]
      },
      "server_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Server type"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Server type"
          },
          "description": {
            "type": "string",
            "description": "Description of the Server type"
          },
          "cores": {
            "type": "integer",
            "description": "Number of cpu cores a Server of this type will have"
          },
          "memory": {
            "type": "number",
            "description": "Memory a Server of this type will have in GB"
          },
          "disk": {
            "type": "number",
            "description": "Disk size a Server of this type will have in GB"
          },
          "deprecated": {
            "type": "boolean",
            "description": "True if Server type is deprecated",
            "nullable": true
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/price_per_time"
            },
            "description": "Prices in different Locations"
          },
          "storage_type": {
            "type": "string",
            "enum": [
              "local",
              "network"
            ],
            "description": "Type of Server boot drive. Local has higher speed. Network has better availability."
          },
          "cpu_type": {
            "type": "string",
            "enum": [
              "dedicated",
              "shared"
            ],
            "description": "Type of cpu"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "cores",
          "memory",
          "disk",
          "deprecated",
          "prices",
          "storage_type",
          "cpu_type"
        ],
        "description": "Type of Server - determines how much ram, disk and cpu a Server has"
      },
      "shutdown_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "soft_reboot_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "ssh_key": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the SSH key"
          },
          "name": {
            "type": "string",
            "description": "Name of the SSH key (must be unique per Project)"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint of public key"
          },
          "public_key": {
            "type": "string",
            "description": "Public key"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the SSH key was created (in ISO-8601 format)"
          }
        },
        "required": [
          "id",
          "name",
          "fingerprint",
          "public_key",
          "labels",
          "created"
        ]
      },
      "subnet": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cloud",
              "server"
            ],
            "description": "Type of Subnetwork"
          },
          "ip_range": {
            "type": "string",
            "description": "Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask."
          },
          "network_zone": {
            "type": "string",
            "description": "Name of Network zone. Currently eu-central is the only available zone."
          }
        },
        "required": [
          "type",
          "network_zone"
        ]
      },
      "subnet_with_gateway": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cloud",
              "server"
            ],
            "description": "Type of Subnetwork"
          },
          "ip_range": {
            "type": "string",
            "description": "Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask."
          },
          "network_zone": {
            "type": "string",
            "description": "Name of Network zone. Currently eu-central is the only available zone."
          },
          "gateway": {
            "type": "string",
            "description": "Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range."
          }
        },
        "required": [
          "type",
          "network_zone",
          "gateway"
        ]
      },
      "unassign_floating_ip_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ]
      },
      "volume": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Volume"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Volume was created (in ISO-8601 format)"
          },
          "name": {
            "type": "string",
            "description": "Name of the Volume"
          },
          "server": {
            "type": "integer",
            "description": "ID of the Server the Volume is attached to, null if it is not attached at all",
            "nullable": true
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "size": {
            "type": "number",
            "description": "Size in GB of the Volume"
          },
          "linux_device": {
            "type": "string",
            "description": "Device path on the file system for the Volume"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Volume from being deleted"
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Volume"
          },
          "labels": {
            "type": "object",
            "properties": {},
            "description": "User-defined labels (key-value pairs)"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "creating"
            ],
            "description": "Current status of the Volume"
          },
          "format": {
            "type": "string",
            "description": "Filesystem of the Volume if formatted on creation, null if not formatted on creation",
            "nullable": true
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "server",
          "location",
          "size",
          "linux_device",
          "protection",
          "labels",
          "status",
          "format"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "paths": {
    "/actions": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "List all Actions",
        "description": "Returns all Action objects. You can sort the results by using the sort URI parameter, and filter them with the status parameter.",
        "operationId": "list_all_actions",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_all_actions_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "start_server",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/actions/{id}": {
      "get": {
        "tags": [
          "actions"
        ],
        "summary": "Get an Action",
        "description": "Returns a specific Action object.",
        "operationId": "get_action",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "start_server",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/datacenters": {
      "get": {
        "tags": [
          "datacenters"
        ],
        "summary": "Get all Datacenters",
        "description": "Returns all Datacenter objects.",
        "operationId": "list_datacenters",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Datacenters by their name. The response will only contain the Datacenter matching the specified name. When the name does not match the Datacenter name format, an invalid_input error is returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_datacenters_response"
                },
                "example": {
                  "datacenters": [
                    {
                      "id": 1,
                      "name": "fsn1-dc8",
                      "description": "Falkenstein 1 DC 8",
                      "location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "server_types": {
                        "supported": [
                          1,
                          2,
                          3
                        ],
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ]
                      }
                    }
                  ],
                  "recommendation": 1
                }
              }
            }
          }
        }
      }
    },
    "/datacenters/{id}": {
      "get": {
        "tags": [
          "datacenters"
        ],
        "summary": "Get a Datacenter",
        "description": "Returns a specific Datacenter object.",
        "operationId": "get_datacenter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Datacenter",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_datacenter_response"
                },
                "example": {
                  "datacenter": {
                    "id": 1,
                    "name": "fsn1-dc8",
                    "description": "Falkenstein 1 DC 8",
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "server_types": {
                      "supported": [
                        1,
                        2,
                        3
                      ],
                      "available": [
                        1,
                        2,
                        3
                      ],
                      "available_for_migration": [
                        1,
                        2,
                        3
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips": {
      "get": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Get all Floating IPs",
        "description": "Returns all Floating IP objects.",
        "operationId": "list_floating_ips",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times. Choices: id id:asc id:desc created created:asc created:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter Floating IPs by labels. The response will only contain Floating IPs matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Floating IPs by their name. The response will only contain the Floating IP matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_floating_ips_response"
                },
                "example": {
                  "floating_ips": [
                    {
                      "id": 4711,
                      "name": "Web Frontend",
                      "description": "Web Frontend",
                      "ip": "131.232.99.1",
                      "type": "ipv4",
                      "server": 42,
                      "dns_ptr": [
                        {
                          "ip": "2001:db8::1",
                          "dns_ptr": "server.example.com"
                        }
                      ],
                      "home_location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "blocked": false,
                      "protection": {
                        "delete": false
                      },
                      "labels": {},
                      "created": "2016-01-30T23:50:00+00:00"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Create a Floating IP",
        "description": "Creates a new Floating IP assigned to a Server. If you want to create a Floating IP that is not bound to a Server, you need to provide the home_location key instead of server. This can be either the ID or the name of the Location this IP shall be created in. Note that a Floating IP can be assigned to a Server in any Location later on. For optimal routing it is advised to use the Floating IP in the same Location it was created in.",
        "operationId": "create_floating_ip",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_floating_ip_request"
              },
              "example": {
                "type": "ipv4",
                "server": 42,
                "home_location": "fsn1",
                "description": "Web Frontend",
                "name": "Web Frontend"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_floating_ip_response"
                },
                "example": {
                  "floating_ip": {
                    "id": 4711,
                    "name": "Web Frontend",
                    "description": "Web Frontend",
                    "ip": "131.232.99.1",
                    "type": "ipv4",
                    "server": 42,
                    "dns_ptr": [
                      {
                        "ip": "2001:db8::1",
                        "dns_ptr": "server.example.com"
                      }
                    ],
                    "home_location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "blocked": false,
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  },
                  "action": {
                    "id": 13,
                    "command": "assign_floating_ip",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips/{id}": {
      "get": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Get a specific Floating IP",
        "description": "Returns a specific Floating IP object.",
        "operationId": "get_specific_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_specific_floating_ip_response"
                },
                "example": {
                  "floating_ip": {
                    "id": 4711,
                    "name": "Web Frontend",
                    "description": "Web Frontend",
                    "ip": "131.232.99.1",
                    "type": "ipv4",
                    "server": 42,
                    "dns_ptr": [
                      {
                        "ip": "2001:db8::1",
                        "dns_ptr": "server.example.com"
                      }
                    ],
                    "home_location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "blocked": false,
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Update a Floating IP",
        "description": "Updates the description or labels of a Floating IP. Also note that when updating labels, the Floating IP’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "operationId": "replace_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_floating_ip_request"
              },
              "example": {
                "name": "New-name",
                "description": "New description",
                "labels": {
                  "labelkey": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_floating_ip_response"
                },
                "example": {
                  "floating_ip": {
                    "id": 4711,
                    "name": "Web Frontend",
                    "description": "New description",
                    "ip": "131.232.99.1",
                    "type": "ipv4",
                    "server": 42,
                    "dns_ptr": [
                      {
                        "ip": "2001:db8::1",
                        "dns_ptr": "server.example.com"
                      }
                    ],
                    "home_location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "blocked": false,
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Delete a Floating IP",
        "description": "Deletes a Floating IP. If it is currently assigned to a Server it will automatically get unassigned.",
        "operationId": "delete_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TODO"
          }
        }
      }
    },
    "/floating_ips/{id}/actions": {
      "get": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Get all Actions for a Floating IP",
        "description": "Returns all Action objects for a Floating IP. You can sort the results by using the sort URI parameter, and filter them with the status parameter.",
        "operationId": "list_actions_for_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_floating_ip_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "assign_floating_ip",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 4711,
                          "type": "floating_ip"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips/{id}/actions/{action_id}": {
      "get": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Get an Action for a Floating IP",
        "description": "Returns a specific Action object for a Floating IP.",
        "operationId": "get_action_for_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_floating_ip_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips/{id}/actions/assign": {
      "post": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Assign a Floating IP to a Server",
        "description": "Assigns a Floating IP to a Server.",
        "operationId": "assign_floating_ip_to_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assign_floating_ip_to_server_request"
              },
              "example": {
                "server": 42
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assign_floating_ip_to_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "assign_floating_ip",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips/{id}/actions/unassign": {
      "post": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Unassign a Floating IP",
        "description": "Unassigns a Floating IP, resulting in it being unreachable. You may assign it to a Server again at a later time.",
        "operationId": "unassign_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unassign_floating_ip_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "unassign_floating_ip",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips/{id}/actions/change_dns_ptr": {
      "post": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Change reverse DNS entry for a Floating IP",
        "description": "Changes the hostname that will appear when getting the hostname belonging to this Floating IP.",
        "operationId": "change_reverse_dns_entry_for_floating_ip",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_entry_for_floating_ip_request"
              },
              "example": {
                "ip": "1.2.3.4",
                "dns_ptr": "server02.example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_entry_for_floating_ip_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_dns_ptr",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/floating_ips/{id}/actions/change_protection": {
      "post": {
        "tags": [
          "floating_ips"
        ],
        "summary": "Change Floating IP Protection",
        "description": "Changes the protection configuration of the Floating IP.",
        "operationId": "change_floating_ip_protection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_floating_ip_protection_request"
              },
              "example": {
                "delete": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_floating_ip_protection_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/images": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get all Images",
        "description": "Returns all Image objects. You can select specific Image types only and sort the results by using URI parameters.",
        "operationId": "list_images",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times. Choices: id id:asc id:desc name name:asc name:desc created created:asc created:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Can be used multiple times. Choices: system snapshot backup",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times. The response will only contain Images matching the status. Choices: available creating",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bound_to",
            "in": "query",
            "description": "Can be used multiple times. Server ID linked to the Image. Only available for Images of type backup",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Images by their name. The response will only contain the Image matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter Images by labels. The response will only contain Images matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_images_response"
                },
                "example": {
                  "images": [
                    {
                      "id": 4711,
                      "type": "snapshot",
                      "status": "available",
                      "name": "ubuntu-16.04",
                      "description": "Ubuntu 16.04 Standard 64 bit",
                      "image_size": 2.3,
                      "disk_size": 10,
                      "created": "2016-01-30T23:50:00+00:00",
                      "created_from": {
                        "id": 1,
                        "name": "Server"
                      },
                      "bound_to": null,
                      "os_flavor": "ubuntu",
                      "os_version": "16.04",
                      "rapid_deploy": false,
                      "protection": {
                        "delete": false
                      },
                      "deprecated": "2018-02-28T00:00:00+00:00",
                      "labels": {}
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/images/{id}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get an Image",
        "description": "Returns a specific Image object.",
        "operationId": "get_image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_image_response"
                },
                "example": {
                  "image": {
                    "id": 4711,
                    "type": "snapshot",
                    "status": "available",
                    "name": "ubuntu-16.04",
                    "description": "Ubuntu 16.04 Standard 64 bit",
                    "image_size": 2.3,
                    "disk_size": 10,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "bound_to": null,
                    "os_flavor": "ubuntu",
                    "os_version": "16.04",
                    "rapid_deploy": false,
                    "protection": {
                      "delete": false
                    },
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "labels": {}
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "images"
        ],
        "summary": "Update an Image",
        "description": "Updates the Image. You may change the description, convert a Backup Image to a Snapshot Image or change the Image labels. Only Images of type snapshot and backup can be updated. Note that when updating labels, the current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "operationId": "replace_image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image to be updated",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_image_request"
              },
              "example": {
                "description": "My new Image description",
                "type": "snapshot",
                "labels": {
                  "labelkey": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_image_response"
                },
                "example": {
                  "image": {
                    "id": 4711,
                    "type": "snapshot",
                    "status": "available",
                    "name": null,
                    "description": "My new Image description",
                    "image_size": 2.3,
                    "disk_size": 10,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "bound_to": null,
                    "os_flavor": "ubuntu",
                    "os_version": "16.04",
                    "rapid_deploy": false,
                    "protection": {
                      "delete": false
                    },
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "labels": {
                      "labelkey": "value"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "images"
        ],
        "summary": "Delete an Image",
        "description": "Deletes an Image. Only Images of type snapshot and backup can be deleted.",
        "operationId": "delete_image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TODO"
          }
        }
      }
    },
    "/images/{id}/actions": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get all Actions for an Image",
        "description": "Returns all Action objects for an Image. You can sort the results by using the sort URI parameter, and filter them with the status parameter.",
        "operationId": "list_actions_for_image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_image_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "change_protection",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 4711,
                          "type": "image"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/images/{id}/actions/{action_id}": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Get an Action for an Image",
        "description": "Returns a specific Action for an Image.",
        "operationId": "get_action_for_image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_image_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "image"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/images/{id}/actions/change_protection": {
      "post": {
        "tags": [
          "images"
        ],
        "summary": "Change Image Protection",
        "description": "Changes the protection configuration of the Image. Can only be used on snapshots.",
        "operationId": "change_image_protection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_image_protection_request"
              },
              "example": {
                "delete": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_image_protection_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "image"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/isos": {
      "get": {
        "tags": [
          "isos"
        ],
        "summary": "Get all ISOs",
        "description": "Returns all available ISO objects.",
        "operationId": "list_isos",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter ISOs by their name. The response will only contain the ISO matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_isos_response"
                },
                "example": {
                  "isos": [
                    {
                      "id": 4711,
                      "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                      "description": "FreeBSD 11.0 x64",
                      "type": "public",
                      "deprecated": "2018-02-28T00:00:00+00:00"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/isos/{id}": {
      "get": {
        "tags": [
          "isos"
        ],
        "summary": "Get an ISO",
        "description": "Returns a specific ISO object.",
        "operationId": "get_iso",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ISO",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_iso_response"
                },
                "example": {
                  "iso": {
                    "id": 4711,
                    "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                    "description": "FreeBSD 11.0 x64",
                    "type": "public",
                    "deprecated": "2018-02-28T00:00:00+00:00"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get all Locations",
        "description": "Returns all Location objects.",
        "operationId": "list_locations",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Locations by their name. The response will only contain the Location matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_locations_response"
                },
                "example": {
                  "locations": [
                    {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "Get a Location",
        "description": "Returns a specific Location object.",
        "operationId": "get_location",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Location",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_location_response"
                },
                "example": {
                  "location": {
                    "id": 1,
                    "name": "fsn1",
                    "description": "Falkenstein DC Park 1",
                    "country": "DE",
                    "city": "Falkenstein",
                    "latitude": 50.47612,
                    "longitude": 12.370071,
                    "network_zone": "eu-central"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "Get all Networks",
        "description": "Gets all existing networks that you have available.",
        "operationId": "list_networks",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter networks by their name. The response will only contain the networks matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter networks by labels. The response will only contain networks with a matching label selector pattern.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_networks_response"
                },
                "example": {
                  "networks": [
                    {
                      "id": 4711,
                      "name": "mynet",
                      "ip_range": "10.0.0.0/16",
                      "subnets": [
                        {
                          "type": "server",
                          "ip_range": "10.0.1.0/24",
                          "network_zone": "eu-central",
                          "gateway": "10.0.0.1"
                        }
                      ],
                      "routes": [
                        {
                          "destination": "10.100.1.0/24",
                          "gateway": "10.0.1.1"
                        }
                      ],
                      "servers": [
                        42
                      ],
                      "protection": {
                        "delete": false
                      },
                      "labels": {},
                      "created": "2016-01-30T23:50:00+00:00"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Create a Network",
        "description": "Creates a network with the specified ip_range. You may specify one or more subnets. You can also add more Subnets later by using the add subnet action. If you do not specify an ip_range in the subnet we will automatically pick the first available /24 range for you. You may specify one or more routes in routes. You can also add more routes later by using the add route action",
        "operationId": "create_network",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_network_request"
              },
              "example": {
                "name": "mynet",
                "ip_range": "10.0.0.0/16",
                "subnets": [
                  {
                    "type": "server",
                    "ip_range": "10.0.1.0/24",
                    "network_zone": "eu-central"
                  }
                ],
                "routes": [
                  {
                    "destination": "10.100.1.0/24",
                    "gateway": "10.0.1.1"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_network_response"
                },
                "example": {
                  "network": {
                    "id": 4711,
                    "name": "mynet",
                    "ip_range": "10.0.0.0/16",
                    "subnets": [
                      {
                        "type": "server",
                        "ip_range": "10.0.1.0/24",
                        "network_zone": "eu-central",
                        "gateway": "10.0.0.1"
                      }
                    ],
                    "routes": [
                      {
                        "destination": "10.100.1.0/24",
                        "gateway": "10.0.1.1"
                      }
                    ],
                    "servers": [
                      42
                    ],
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "Get a Network",
        "description": "Gets a specific network object.",
        "operationId": "get_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_network_response"
                },
                "example": {
                  "network": {
                    "id": 4711,
                    "name": "mynet",
                    "ip_range": "10.0.0.0/16",
                    "subnets": [
                      {
                        "type": "server",
                        "ip_range": "10.0.1.0/24",
                        "network_zone": "eu-central",
                        "gateway": "10.0.0.1"
                      }
                    ],
                    "routes": [
                      {
                        "destination": "10.100.1.0/24",
                        "gateway": "10.0.1.1"
                      }
                    ],
                    "servers": [
                      42
                    ],
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "networks"
        ],
        "summary": "Update a Network",
        "description": "Updates the network properties. Note that when updating labels, the network’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body. Note: if the network object changes during the request, the response will be a “conflict” error.",
        "operationId": "replace_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the network to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_network_request"
              },
              "example": {
                "name": "new-name",
                "labels": {
                  "labelkey": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_network_response"
                },
                "example": {
                  "network": {
                    "id": 4711,
                    "name": "new-name",
                    "ip_range": "10.0.0.0/16",
                    "subnets": [
                      {
                        "type": "server",
                        "ip_range": "10.0.1.0/24",
                        "network_zone": "eu-central",
                        "gateway": "10.0.0.1"
                      }
                    ],
                    "routes": [
                      {
                        "destination": "10.100.1.0/24",
                        "gateway": "10.0.1.1"
                      }
                    ],
                    "servers": [
                      42
                    ],
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "networks"
        ],
        "summary": "Delete a Network",
        "description": "Deletes a network. If there are Servers attached they will be detached in the background. Note: if the network object changes during the request, the response will be a “conflict” error.",
        "operationId": "delete_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TODO"
          }
        }
      }
    },
    "/networks/{id}/actions": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "Get all Actions for a Network",
        "description": "Returns all Action objects for a Network. You can sort the results by using the sort URI parameter, and filter them with the status parameter.",
        "operationId": "list_actions_for_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_network_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "add_subnet",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 4711,
                          "type": "network"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/{action_id}": {
      "get": {
        "tags": [
          "networks"
        ],
        "summary": "Get an Action for a Network",
        "description": "Returns a specific Action for a Network.",
        "operationId": "get_action_for_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_subnet",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/add_subnet": {
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Add a subnet to a Network",
        "description": "Adds a new subnet object to the Network. If you do not specify an ip_range for the subnet we will automatically pick the first available /24 range for you if possible. Note: if the parent Network object changes during the request, the response will be a “conflict” error.",
        "operationId": "add_subnet_to_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_subnet_to_network_request"
              },
              "example": {
                "type": "server",
                "ip_range": "10.0.1.0/24",
                "network_zone": "eu-central"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add_subnet_to_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_subnet",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/delete_subnet": {
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Delete a subnet from a Network",
        "description": "Deletes a single subnet entry from a Network. You cannot delete subnets which still have Servers attached. If you have Servers attached you first need to detach all Servers that use IPs from this subnet before you can delete the subnet. Note: if the Network object changes during the request, the response will be a “conflict” error.",
        "operationId": "delete_subnet_from_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_subnet_from_network_request"
              },
              "example": {
                "ip_range": "10.0.1.0/24"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_subnet_from_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "delete_subnet",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/add_route": {
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Add a route to a Network",
        "description": "Adds a route entry to a Network. Note: if the Network object changes during the request, the response will be a “conflict” error.",
        "operationId": "add_route_to_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_route_to_network_request"
              },
              "example": {
                "destination": "10.100.1.0/24",
                "gateway": "10.0.1.1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add_route_to_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_route",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/delete_route": {
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Delete a route from a Network",
        "description": "Delete a route entry from a Network. Note: if the Network object changes during the request, the response will be a “conflict” error.",
        "operationId": "delete_route_from_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_route_from_network_request"
              },
              "example": {
                "destination": "10.100.1.0/24",
                "gateway": "10.0.1.1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_route_from_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "delete_route",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/change_ip_range": {
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Change IP range of a Network",
        "description": "Changes the IP range of a Network. IP ranges can only be extended and never shrunk. You can only add IPs at the end of an existing IP range. This means that the IP part of your existing range must stay the same and you can only change its netmask. For example if you have a range 10.0.0.0/16 you want to extend then your new range must also start with the IP 10.0.0.0. Your CIDR netmask /16 may change to a number that is smaller than 16 thereby increasing the IP range. So valid entries would be 10.0.0.0/15, 10.0.0.0/14, 10.0.0.0/13 and so on. After changing the IP range you will have to adjust the routes on your connected Servers by either rebooting them or manually changing the routes to your private Network interface. Note: if the Network object changes during the request, the response will be a “conflict” error.",
        "operationId": "change_ip_range_of_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_ip_range_of_network_request"
              },
              "example": {
                "ip_range": "10.0.0.0/12"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_ip_range_of_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_ip_range",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/networks/{id}/actions/change_protection": {
      "post": {
        "tags": [
          "networks"
        ],
        "summary": "Change Network Protection",
        "description": "Changes the protection configuration of a Network. Note: if the Network object changes during the request, the response will be a “conflict” error.",
        "operationId": "change_network_protection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_network_protection_request"
              },
              "example": {
                "delete": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_network_protection_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/pricing": {
      "get": {
        "tags": [
          "pricing"
        ],
        "summary": "Get all prices",
        "description": "Returns prices for all resources available on the platform. VAT and currency of the Project owner are used for calculations. Both net and gross prices are included in the response.",
        "operationId": "list_prices",
        "parameters": [],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_prices_response"
                },
                "example": {
                  "pricing": {
                    "currency": "EUR",
                    "vat_rate": "19.000000",
                    "image": {
                      "price_per_gb_month": {
                        "net": "1.0000000000",
                        "gross": "1.1900000000000000"
                      }
                    },
                    "floating_ip": {
                      "price_monthly": {
                        "net": "1.0000000000",
                        "gross": "1.1900000000000000"
                      }
                    },
                    "traffic": {
                      "price_per_tb": {
                        "net": "1.0000000000",
                        "gross": "1.1900000000000000"
                      }
                    },
                    "server_backup": {
                      "percentage": "20.0000000000"
                    },
                    "volume": {
                      "price_per_gb_month": {
                        "net": "1.0000000000",
                        "gross": "1.1900000000000000"
                      }
                    },
                    "server_types": [
                      {
                        "id": 4,
                        "name": "CX11",
                        "prices": [
                          {
                            "location": "fsn1",
                            "price_hourly": {
                              "net": "1.0000000000",
                              "gross": "1.1900000000000000"
                            },
                            "price_monthly": {
                              "net": "1.0000000000",
                              "gross": "1.1900000000000000"
                            }
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Get all Servers",
        "description": "Returns all existing Server objects.",
        "operationId": "list_servers",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times. The response will only contain Server matching the status. Choices: initializing starting running stopping off deleting rebuilding migrating unknown",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times. Choices: id id:asc id:desc name name:asc name:desc created created:asc created:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Servers by their name. The response will only contain the Server matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter Servers by labels. The response will only contain Servers matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_servers_response"
                },
                "example": {
                  "servers": [
                    {
                      "id": 42,
                      "name": "my-server",
                      "status": "running",
                      "created": "2016-01-30T23:50:00+00:00",
                      "public_net": {
                        "ipv4": {
                          "ip": "1.2.3.4",
                          "blocked": false,
                          "dns_ptr": "server01.example.com"
                        },
                        "ipv6": {
                          "ip": "2001:db8::/64",
                          "blocked": false,
                          "dns_ptr": [
                            {
                              "ip": "2001:db8::1",
                              "dns_ptr": "server.example.com"
                            }
                          ]
                        },
                        "floating_ips": [
                          478
                        ]
                      },
                      "private_net": [
                        {
                          "network": 4711,
                          "ip": "10.0.0.2",
                          "alias_ips": [],
                          "mac_address": "86:00:ff:2a:7d:e1"
                        }
                      ],
                      "server_type": {
                        "id": 1,
                        "name": "cx11",
                        "description": "CX11",
                        "cores": 1,
                        "memory": 1,
                        "disk": 25,
                        "deprecated": true,
                        "prices": [
                          {
                            "location": "fsn1",
                            "price_hourly": {
                              "net": "1.0000000000",
                              "gross": "1.1900000000000000"
                            },
                            "price_monthly": {
                              "net": "1.0000000000",
                              "gross": "1.1900000000000000"
                            }
                          }
                        ],
                        "storage_type": "local",
                        "cpu_type": "shared"
                      },
                      "datacenter": {
                        "id": 1,
                        "name": "fsn1-dc8",
                        "description": "Falkenstein 1 DC 8",
                        "location": {
                          "id": 1,
                          "name": "fsn1",
                          "description": "Falkenstein DC Park 1",
                          "country": "DE",
                          "city": "Falkenstein",
                          "latitude": 50.47612,
                          "longitude": 12.370071,
                          "network_zone": "eu-central"
                        },
                        "server_types": {
                          "supported": [
                            1,
                            2,
                            3
                          ],
                          "available": [
                            1,
                            2,
                            3
                          ],
                          "available_for_migration": [
                            1,
                            2,
                            3
                          ]
                        }
                      },
                      "image": {
                        "id": 4711,
                        "type": "snapshot",
                        "status": "available",
                        "name": "ubuntu-16.04",
                        "description": "Ubuntu 16.04 Standard 64 bit",
                        "image_size": 2.3,
                        "disk_size": 10,
                        "created": "2016-01-30T23:50:00+00:00",
                        "created_from": {
                          "id": 1,
                          "name": "Server"
                        },
                        "bound_to": null,
                        "os_flavor": "ubuntu",
                        "os_version": "16.04",
                        "rapid_deploy": false,
                        "protection": {
                          "delete": false
                        },
                        "deprecated": "2018-02-28T00:00:00+00:00",
                        "labels": {}
                      },
                      "iso": {
                        "id": 4711,
                        "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                        "description": "FreeBSD 11.0 x64",
                        "type": "public",
                        "deprecated": "2018-02-28T00:00:00+00:00"
                      },
                      "rescue_enabled": false,
                      "locked": false,
                      "backup_window": "22-02",
                      "outgoing_traffic": 123456,
                      "ingoing_traffic": 123456,
                      "included_traffic": 654321,
                      "protection": {
                        "delete": false,
                        "rebuild": false
                      },
                      "labels": {},
                      "volumes": []
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Create a Server",
        "description": "Creates a new Server. Returns preliminary information about the Server as well as an Action that covers progress of creation.",
        "operationId": "create_server",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_server_request"
              },
              "example": {
                "name": "my-server",
                "server_type": "cx11",
                "location": "nbg1",
                "start_after_create": true,
                "image": "ubuntu-16.04",
                "ssh_keys": [
                  "my-ssh-key"
                ],
                "volumes": [
                  1
                ],
                "networks": [
                  1
                ],
                "user_data": "#cloud-config\nruncmd:\n- [touch, /root/cloud-init-worked]\n",
                "automount": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_server_response"
                },
                "example": {
                  "server": {
                    "id": 42,
                    "name": "my-server",
                    "status": "initializing",
                    "created": "2016-01-30T23:50:00+00:00",
                    "public_net": {
                      "ipv4": {
                        "ip": "1.2.3.4",
                        "blocked": false,
                        "dns_ptr": "server01.example.com"
                      },
                      "ipv6": {
                        "ip": "2001:db8::/64",
                        "blocked": false,
                        "dns_ptr": [
                          {
                            "ip": "2001:db8::1",
                            "dns_ptr": "server.example.com"
                          }
                        ]
                      },
                      "floating_ips": [
                        478
                      ]
                    },
                    "private_net": [
                      {
                        "network": 4711,
                        "ip": "10.0.0.2",
                        "alias_ips": [],
                        "mac_address": "86:00:ff:2a:7d:e1"
                      }
                    ],
                    "server_type": {
                      "id": 1,
                      "name": "cx11",
                      "description": "CX11",
                      "cores": 1,
                      "memory": 1,
                      "disk": 25,
                      "deprecated": true,
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ],
                      "storage_type": "local",
                      "cpu_type": "shared"
                    },
                    "datacenter": {
                      "id": 1,
                      "name": "fsn1-dc8",
                      "description": "Falkenstein 1 DC 8",
                      "location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "server_types": {
                        "supported": [
                          1,
                          2,
                          3
                        ],
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ]
                      }
                    },
                    "image": {
                      "id": 4711,
                      "type": "snapshot",
                      "status": "available",
                      "name": "ubuntu-16.04",
                      "description": "Ubuntu 16.04 Standard 64 bit",
                      "image_size": 2.3,
                      "disk_size": 10,
                      "created": "2016-01-30T23:50:00+00:00",
                      "created_from": {
                        "id": 1,
                        "name": "Server"
                      },
                      "bound_to": null,
                      "os_flavor": "ubuntu",
                      "os_version": "16.04",
                      "rapid_deploy": false,
                      "protection": {
                        "delete": false
                      },
                      "deprecated": "2018-02-28T00:00:00+00:00",
                      "labels": {}
                    },
                    "iso": {
                      "id": 4711,
                      "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                      "description": "FreeBSD 11.0 x64",
                      "type": "public",
                      "deprecated": "2018-02-28T00:00:00+00:00"
                    },
                    "rescue_enabled": false,
                    "locked": false,
                    "backup_window": "22-02",
                    "outgoing_traffic": 123456,
                    "ingoing_traffic": 123456,
                    "included_traffic": 654321,
                    "protection": {
                      "delete": false,
                      "rebuild": false
                    },
                    "labels": {},
                    "volumes": []
                  },
                  "action": {
                    "id": 1,
                    "command": "create_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  },
                  "next_actions": [
                    {
                      "id": 13,
                      "command": "start_server",
                      "status": "running",
                      "progress": 0,
                      "started": "2016-01-30T23:50:00+00:00",
                      "finished": null,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ],
                  "root_password": "YItygq1v3GYjjMomLaKc"
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Get a Server",
        "description": "Returns a specific Server object. The Server must exist inside the Project.",
        "operationId": "get_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_server_response"
                },
                "example": {
                  "server": {
                    "id": 42,
                    "name": "my-server",
                    "status": "running",
                    "created": "2016-01-30T23:50:00+00:00",
                    "public_net": {
                      "ipv4": {
                        "ip": "1.2.3.4",
                        "blocked": false,
                        "dns_ptr": "server01.example.com"
                      },
                      "ipv6": {
                        "ip": "2001:db8::/64",
                        "blocked": false,
                        "dns_ptr": [
                          {
                            "ip": "2001:db8::1",
                            "dns_ptr": "server.example.com"
                          }
                        ]
                      },
                      "floating_ips": [
                        478
                      ]
                    },
                    "private_net": [
                      {
                        "network": 4711,
                        "ip": "10.0.0.2",
                        "alias_ips": [],
                        "mac_address": "86:00:ff:2a:7d:e1"
                      }
                    ],
                    "server_type": {
                      "id": 1,
                      "name": "cx11",
                      "description": "CX11",
                      "cores": 1,
                      "memory": 1,
                      "disk": 25,
                      "deprecated": true,
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ],
                      "storage_type": "local",
                      "cpu_type": "shared"
                    },
                    "datacenter": {
                      "id": 1,
                      "name": "fsn1-dc8",
                      "description": "Falkenstein 1 DC 8",
                      "location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "server_types": {
                        "supported": [
                          1,
                          2,
                          3
                        ],
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ]
                      }
                    },
                    "image": {
                      "id": 4711,
                      "type": "snapshot",
                      "status": "available",
                      "name": "ubuntu-16.04",
                      "description": "Ubuntu 16.04 Standard 64 bit",
                      "image_size": 2.3,
                      "disk_size": 10,
                      "created": "2016-01-30T23:50:00+00:00",
                      "created_from": {
                        "id": 1,
                        "name": "Server"
                      },
                      "bound_to": null,
                      "os_flavor": "ubuntu",
                      "os_version": "16.04",
                      "rapid_deploy": false,
                      "protection": {
                        "delete": false
                      },
                      "deprecated": "2018-02-28T00:00:00+00:00",
                      "labels": {}
                    },
                    "iso": {
                      "id": 4711,
                      "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                      "description": "FreeBSD 11.0 x64",
                      "type": "public",
                      "deprecated": "2018-02-28T00:00:00+00:00"
                    },
                    "rescue_enabled": false,
                    "locked": false,
                    "backup_window": "22-02",
                    "outgoing_traffic": 123456,
                    "ingoing_traffic": 123456,
                    "included_traffic": 654321,
                    "protection": {
                      "delete": false,
                      "rebuild": false
                    },
                    "labels": {},
                    "volumes": []
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "servers"
        ],
        "summary": "Update a Server",
        "description": "Updates a Server. You can update a Server’s name and a Server’s labels. Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes). Also note that when updating labels, the Server’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "operationId": "replace_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_server_request"
              },
              "example": {
                "name": "new-name",
                "labels": {
                  "labelkey": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_server_response"
                },
                "example": {
                  "server": {
                    "id": 42,
                    "name": "new-name",
                    "status": "running",
                    "created": "2016-01-30T23:50:00+00:00",
                    "public_net": {
                      "ipv4": {
                        "ip": "1.2.3.4",
                        "blocked": false,
                        "dns_ptr": "server01.example.com"
                      },
                      "ipv6": {
                        "ip": "2001:db8::/64",
                        "blocked": false,
                        "dns_ptr": [
                          {
                            "ip": "2001:db8::1",
                            "dns_ptr": "server.example.com"
                          }
                        ]
                      },
                      "floating_ips": [
                        478
                      ]
                    },
                    "private_net": [
                      {
                        "network": 4711,
                        "ip": "10.0.0.2",
                        "alias_ips": [],
                        "mac_address": "86:00:ff:2a:7d:e1"
                      }
                    ],
                    "server_type": {
                      "id": 1,
                      "name": "cx11",
                      "description": "CX11",
                      "cores": 1,
                      "memory": 1,
                      "disk": 25,
                      "deprecated": true,
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ],
                      "storage_type": "local",
                      "cpu_type": "shared"
                    },
                    "datacenter": {
                      "id": 1,
                      "name": "fsn1-dc8",
                      "description": "Falkenstein 1 DC 8",
                      "location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "server_types": {
                        "supported": [
                          1,
                          2,
                          3
                        ],
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ]
                      }
                    },
                    "image": {
                      "id": 4711,
                      "type": "snapshot",
                      "status": "available",
                      "name": "ubuntu-16.04",
                      "description": "Ubuntu 16.04 Standard 64 bit",
                      "image_size": 2.3,
                      "disk_size": 10,
                      "created": "2016-01-30T23:50:00+00:00",
                      "created_from": {
                        "id": 1,
                        "name": "Server"
                      },
                      "bound_to": null,
                      "os_flavor": "ubuntu",
                      "os_version": "16.04",
                      "rapid_deploy": false,
                      "protection": {
                        "delete": false
                      },
                      "deprecated": "2018-02-28T00:00:00+00:00",
                      "labels": {}
                    },
                    "iso": {
                      "id": 4711,
                      "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                      "description": "FreeBSD 11.0 x64",
                      "type": "public",
                      "deprecated": "2018-02-28T00:00:00+00:00"
                    },
                    "rescue_enabled": false,
                    "locked": false,
                    "backup_window": "22-02",
                    "outgoing_traffic": 123456,
                    "ingoing_traffic": 123456,
                    "included_traffic": 654321,
                    "protection": {
                      "delete": false,
                      "rebuild": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "volumes": []
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "servers"
        ],
        "summary": "Delete a Server",
        "description": "Deletes a Server. This immediately removes the Server from your account, and it is no longer accessible.",
        "operationId": "delete_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "delete_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/metrics": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Get Metrics for a Server",
        "description": "Get Metrics for specified Server. You must specify the type of metric to get: cpu, disk or network. You can also specify more than one type by comma separation, e.g. cpu,disk. Depending on the type you will get different time series data:",
        "operationId": "get_metrics_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of metrics to get cpu disk network",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start of period to get Metrics for (in ISO-8601 format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End of period to get Metrics for (in ISO-8601 format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step",
            "in": "query",
            "description": "Resolution of results in seconds",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_metrics_for_server_response"
                },
                "example": {
                  "metrics": {
                    "start": "2017-01-01T00:00:00+00:00",
                    "end": "2017-01-01T23:00:00+00:00",
                    "step": 60,
                    "time_series": {
                      "name_of_timeseries": {
                        "values": [
                          [
                            "1435781470.622",
                            "42"
                          ]
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Get all Actions for a Server",
        "description": "Returns all Action objects for a Server. You can sort the results by using the sort URI parameter, and filter them with the status parameter.",
        "operationId": "list_actions_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_server_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "start_server",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/{action_id}": {
      "get": {
        "tags": [
          "servers"
        ],
        "summary": "Get an Action for a Server",
        "description": "Returns a specific Action object for a Server.",
        "operationId": "get_action_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "start_server",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/poweron": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Power on a Server",
        "description": "Starts a Server by turning its power on.",
        "operationId": "power_on_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/power_on_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "start_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/reboot": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Soft-reboot a Server",
        "description": "Reboots a Server gracefully by sending an ACPI request. The Server operating system must support ACPI and react to the request, otherwise the Server will not reboot.",
        "operationId": "soft_reboot_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/soft_reboot_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "reboot_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/reset": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Reset a Server",
        "description": "Cuts power to a Server and starts it again. This forcefully stops it without giving the Server operating system time to gracefully stop. This may lead to data loss, it’s equivalent to pulling the power cord and plugging it in again. Reset should only be used when reboot does not work.",
        "operationId": "reset_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reset_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "reset_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/shutdown": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Shutdown a Server",
        "description": "Shuts down a Server gracefully by sending an ACPI shutdown request. The Server operating system must support ACPI and react to the request, otherwise the Server will not shut down.",
        "operationId": "shutdown_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shutdown_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "shutdown_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/poweroff": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Power off a Server",
        "description": "Cuts power to the Server. This forcefully stops it without giving the Server operating system time to gracefully stop. May lead to data loss, equivalent to pulling the power cord. Power off should only be used when shutdown does not work.",
        "operationId": "power_off_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/power_off_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "stop_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/reset_password": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Reset root Password of a Server",
        "description": "Resets the root password. Only works for Linux systems that are running the qemu guest agent. Server must be powered on (state on) in order for this operation to succeed. This will generate a new password for this Server and return it. If this does not succeed you can use the rescue system to netboot the Server and manually change your Server password by hand.",
        "operationId": "reset_root_password_of_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reset_root_password_of_server_response"
                },
                "example": {
                  "root_password": "zCWbFhnu950dUTko5f40",
                  "action": {
                    "id": 13,
                    "command": "reset_password",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/enable_rescue": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Enable Rescue Mode for a Server",
        "description": "Enable the Hetzner Rescue System for this Server. The next time a Server with enabled rescue mode boots it will start a special minimal Linux distribution designed for repair and reinstall. In case a Server cannot boot on its own you can use this to access a Server’s disks. Rescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes. Enabling rescue mode will not reboot your Server — you will have to do this yourself.",
        "operationId": "enable_rescue_mode_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enable_rescue_mode_for_server_request"
              },
              "example": {
                "type": "linux64",
                "ssh_keys": [
                  2323
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enable_rescue_mode_for_server_response"
                },
                "example": {
                  "root_password": "zCWbFhnu950dUTko5f40",
                  "action": {
                    "id": 13,
                    "command": "enable_rescue",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/disable_rescue": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Disable Rescue Mode for a Server",
        "description": "Disables the Hetzner Rescue System for a Server. This makes a Server start from its disks on next reboot. Rescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes. Disabling rescue mode will not reboot your Server — you will have to do this yourself.",
        "operationId": "disable_rescue_mode_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disable_rescue_mode_for_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "disable_rescue",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/create_image": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Create Image from a Server",
        "description": "Creates an Image (snapshot) from a Server by copying the contents of its disks. This creates a snapshot of the current state of the disk and copies it into an Image. If the Server is currently running you must make sure that its disk content is consistent. Otherwise, the created Image may not be readable. To make sure disk content is consistent, we recommend to shut down the Server prior to creating an Image. You can either create a backup Image that is bound to the Server and therefore will be deleted when the Server is deleted, or you can create an snapshot Image which is completely independent of the Server it was created from and will survive Server deletion. Backup Images are only available when the backup option is enabled for the Server. Snapshot Images are billed on a per GB basis.",
        "operationId": "create_image_from_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_image_from_server_request"
              },
              "example": {
                "description": "my",
                "type": "snapshot"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_image_from_server_response"
                },
                "example": {
                  "image": {
                    "id": 4711,
                    "type": "snapshot",
                    "status": "creating",
                    "name": null,
                    "description": "my image",
                    "image_size": 2.3,
                    "disk_size": 10,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "bound_to": null,
                    "os_flavor": "ubuntu",
                    "os_version": "16.04",
                    "rapid_deploy": false,
                    "protection": {
                      "delete": false
                    },
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "labels": {}
                  },
                  "action": {
                    "id": 13,
                    "command": "create_image",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/rebuild": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Rebuild a Server from an Image",
        "description": "Rebuilds a Server overwriting its disk with the content of an Image, thereby destroying all data on the target Server The Image can either be one you have created earlier (backup or snapshot Image) or it can be a completely fresh system Image provided by us. You can get a list of all available Images with GET /images. Your Server will automatically be powered off before the rebuild command executes.",
        "operationId": "rebuild_server_from_image",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rebuild_server_from_image_request"
              },
              "example": {
                "image": "ubuntu-16.04"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/rebuild_server_from_image_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "rebuild_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  },
                  "root_password": null
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/change_type": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Change the Type of a Server",
        "description": "Changes the type (Cores, RAM and disk sizes) of a Server. Server must be powered off for this command to succeed. This copies the content of its disk, and starts it again. You can only migrate to Server types with the same storage_type and equal or bigger disks. Shrinking disks is not possible as it might destroy data. If the disk gets upgraded, the Server type can not be downgraded any more. If you plan to downgrade the Server type, set upgrade_disk to false.",
        "operationId": "change_type_of_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_type_of_server_request"
              },
              "example": {
                "upgrade_disk": true,
                "server_type": "cx11"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_type_of_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_server_type",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/enable_backup": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Enable and Configure Backups for a Server",
        "description": "Enables and configures the automatic daily backup option for the Server. Enabling automatic backups will increase the price of the Server by 20%. In return, you will get seven slots where Images of type backup can be stored. Backups are automatically created daily.",
        "operationId": "enable_and_configure_backups_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enable_and_configure_backups_for_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "enable_backup",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/disable_backup": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Disable Backups for a Server",
        "description": "Disables the automatic backup option and deletes all existing Backups for a Server. No more additional charges for backups will be made. Caution: This immediately removes all existing backups for the Server!",
        "operationId": "disable_backups_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disable_backups_for_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "disable_backup",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/attach_iso": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Attach an ISO to a Server",
        "description": "Attaches an ISO to a Server. The Server will immediately see it as a new disk. An already attached ISO will automatically be detached before the new ISO is attached. Servers with attached ISOs have a modified boot order: They will try to boot from the ISO first before falling back to hard disk.",
        "operationId": "attach_iso_to_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_iso_to_server_request"
              },
              "example": {
                "iso": "FreeBSD-11.0-RELEASE-amd64-dvd1"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attach_iso_to_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_iso",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/detach_iso": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Detach an ISO from a Server",
        "description": "Detaches an ISO from a Server. In case no ISO Image is attached to the Server, the status of the returned Action is immediately set to success.",
        "operationId": "detach_iso_from_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detach_iso_from_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_iso",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/change_dns_ptr": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Change reverse DNS entry for this Server",
        "description": "Changes the hostname that will appear when getting the hostname belonging to the primary IPs (IPv4 and IPv6) of this Server. Floating IPs assigned to the Server are not affected by this.",
        "operationId": "change_reverse_dns_entry_for_this_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_server_request"
              },
              "example": {
                "ip": "1.2.3.4",
                "dns_ptr": "server01.example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_dns_ptr",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/change_protection": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Change Server Protection",
        "description": "Changes the protection configuration of the Server.",
        "operationId": "change_server_protection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_server_protection_request"
              },
              "example": {
                "delete": true,
                "rebuild": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_server_protection_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/request_console": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Request Console for a Server",
        "description": "Requests credentials for remote access via VNC over websocket to keyboard, monitor, and mouse for a Server. The provided URL is valid for 1 minute, after this period a new url needs to be created to connect to the Server. How long the connection is open after the initial connect is not subject to this timeout.",
        "operationId": "request_console_for_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request_console_for_server_response"
                },
                "example": {
                  "wss_url": "wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c",
                  "password": "9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x",
                  "action": {
                    "id": 13,
                    "command": "request_console",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/attach_to_network": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Attach a Server to a Network",
        "description": "Attaches a Server to a network. This will complement the fixed public Server interface by adding an additional ethernet interface to the Server which is connected to the specified network. The Server will get an IP auto assigned from a subnet of type server in the same network_zone. Using the alias_ips attribute you can also define one or more additional IPs to the Servers. Please note that you will have to configure these IPs by hand on your Server since only the primary IP will be given out by dhcp.",
        "operationId": "attach_server_to_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_server_to_network_request"
              },
              "example": {
                "network": 4711,
                "ip": "10.0.1.1",
                "alias_ips": [
                  "10.0.1.2"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attach_server_to_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_to_network",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/detach_from_network": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Detach a Server from a Network",
        "description": "Detaches a Server from a network. The interface for this network will vanish.",
        "operationId": "detach_server_from_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detach_server_from_network_request"
              },
              "example": {
                "network": 4711
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detach_server_from_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_from_network",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/servers/{id}/actions/change_alias_ips": {
      "post": {
        "tags": [
          "servers"
        ],
        "summary": "Change alias IPs of a Network",
        "description": "Changes the alias IPs of an already attached Network. Note that the existing aliases for the specified Network will be replaced with these provided in the request body. So if you want to add an alias IP, you have to provide the existing ones from the Network plus the new alias IP in the request body.",
        "operationId": "change_alias_ips_of_network",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_alias_ips_of_network_request"
              },
              "example": {
                "network": 4711,
                "alias_ips": [
                  "10.0.1.2"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_alias_ips_of_network_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_alias_ips",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/server_types": {
      "get": {
        "tags": [
          "server_types"
        ],
        "summary": "Get all Server Types",
        "description": "Gets all Server type objects.",
        "operationId": "list_server_types",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Server types by their name. The response will only contain the Server type matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_server_types_response"
                },
                "example": {
                  "server_types": [
                    {
                      "id": 1,
                      "name": "cx11",
                      "description": "CX11",
                      "cores": 1,
                      "memory": 1,
                      "disk": 25,
                      "deprecated": true,
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ],
                      "storage_type": "local",
                      "cpu_type": "shared"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/server_types/{id}": {
      "get": {
        "tags": [
          "server_types"
        ],
        "summary": "Get a Server Type",
        "description": "Gets a specific Server type object.",
        "operationId": "get_server_type",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Server type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_server_type_response"
                },
                "example": {
                  "server_type": {
                    "id": 1,
                    "name": "cx11",
                    "description": "CX11",
                    "cores": 1,
                    "memory": 1,
                    "disk": 25,
                    "deprecated": true,
                    "prices": [
                      {
                        "location": "fsn1",
                        "price_hourly": {
                          "net": "1.0000000000",
                          "gross": "1.1900000000000000"
                        },
                        "price_monthly": {
                          "net": "1.0000000000",
                          "gross": "1.1900000000000000"
                        }
                      }
                    ],
                    "storage_type": "local",
                    "cpu_type": "shared"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ssh_keys": {
      "get": {
        "tags": [
          "ssh_keys"
        ],
        "summary": "Get all SSH keys",
        "description": "Returns all SSH key objects.",
        "operationId": "list_ssh_keys",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times. Choices: id id:asc id:desc name name:asc name:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter SSH keys by their name. The response will only contain the SSH key matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter SSH keys by labels. The response will only contain SSH keys matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_ssh_keys_response"
                },
                "example": {
                  "ssh_keys": [
                    {
                      "id": 2323,
                      "name": "My ssh key",
                      "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                      "public_key": "ssh-rsa AAAjjk76kgf...Xt",
                      "labels": {},
                      "created": "2016-01-30T23:50:00+00:00"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ssh_keys"
        ],
        "summary": "Create an SSH key",
        "description": "Creates a new SSH key with the given name and public_key. Once an SSH key is created, it can be used in other calls such as creating Servers.",
        "operationId": "create_ssh_key",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_ssh_key_request"
              },
              "example": {
                "name": "My ssh key",
                "public_key": "ssh-rsa AAAjjk76kgf...Xt"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_ssh_key_response"
                },
                "example": {
                  "ssh_key": {
                    "id": 2323,
                    "name": "My ssh key",
                    "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                    "public_key": "ssh-rsa AAAjjk76kgf...Xt",
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ssh_keys/{id}": {
      "get": {
        "tags": [
          "ssh_keys"
        ],
        "summary": "Get an SSH key",
        "description": "Returns a specific SSH key object.",
        "operationId": "get_ssh_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_ssh_key_response"
                },
                "example": {
                  "ssh_key": {
                    "id": 2323,
                    "name": "My ssh key",
                    "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                    "public_key": "ssh-rsa AAAjjk76kgf...Xt",
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ssh_keys"
        ],
        "summary": "Update an SSH key",
        "description": "Updates an SSH key. You can update an SSH key name and an SSH key labels. Please note that when updating labels, the SSH key current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "operationId": "replace_ssh_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_ssh_key_request"
              },
              "example": {
                "name": "New name",
                "labels": {
                  "labelkey": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_ssh_key_response"
                },
                "example": {
                  "ssh_key": {
                    "id": 2323,
                    "name": "New name",
                    "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                    "public_key": "ssh-rsa AAAjjk76kgf...Xt",
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ssh_keys"
        ],
        "summary": "Delete an SSH key",
        "description": "Deletes an SSH key. It cannot be used anymore.",
        "operationId": "delete_ssh_key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TODO"
          }
        }
      }
    },
    "/volumes": {
      "get": {
        "tags": [
          "volumes"
        ],
        "summary": "Get all Volumes",
        "description": "Gets all existing Volumes that you have available.",
        "operationId": "list_volumes",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times. The response will only contain Volumes matching the status. Choices: available creating",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times. Choices: id id:asc id:desc name name:asc name:desc created created:asc created:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Volumes by their name. The response will only contain the Volumes matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter Volumes by labels. The response will only contain Volumes with a matching label selector pattern.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_volumes_response"
                },
                "example": {
                  "volumes": [
                    {
                      "id": 4711,
                      "created": "2016-01-30T23:50:11+00:00",
                      "name": "database-storage",
                      "server": 12,
                      "location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "size": 42,
                      "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                      "protection": {
                        "delete": false
                      },
                      "labels": {},
                      "status": "available",
                      "format": "xfs"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Create a Volume",
        "description": "Creates a new Volume attached to a Server. If you want to create a Volume that is not attached to a Server, you need to provide the location key instead of server. This can be either the ID or the name of the Location this Volume will be created in. Note that a Volume can be attached to a Server only in the same Location as the Volume itself. Specifying the Server during Volume creation will automatically attach the Volume to that Server after it has been initialized. In that case, the next_actions key in the response is an array which contains a single attach_volume action. The minimum Volume size is 10GB and the maximum size is 10TB (10240GB). A volume’s name can consist of alphanumeric characters, dashes, underscores, and dots, but has to start and end with an alphanumeric character. The total length is limited to 64 characters. Volume names must be unique per Project.",
        "operationId": "create_volume",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_volume_request"
              },
              "example": {
                "size": 42,
                "name": "test-database",
                "location": "nbg1",
                "automount": false,
                "format": "xfs"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_volume_response"
                },
                "example": {
                  "volume": {
                    "id": 4711,
                    "created": "2016-01-30T23:50:11+00:00",
                    "name": "database-storage",
                    "server": 12,
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "size": 42,
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "status": "available",
                    "format": "xfs"
                  },
                  "action": {
                    "id": 13,
                    "command": "create_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  },
                  "next_actions": [
                    {
                      "id": 13,
                      "command": "start_server",
                      "status": "running",
                      "progress": 0,
                      "started": "2016-01-30T23:50:00+00:00",
                      "finished": null,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/volumes/{id}": {
      "get": {
        "tags": [
          "volumes"
        ],
        "summary": "Get a Volume",
        "description": "Gets a specific Volume object.",
        "operationId": "get_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_volume_response"
                },
                "example": {
                  "volume": {
                    "id": 4711,
                    "created": "2016-01-30T23:50:11+00:00",
                    "name": "database-storage",
                    "server": 12,
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "size": 42,
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "status": "available",
                    "format": "xfs"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "volumes"
        ],
        "summary": "Update a Volume",
        "description": "Updates the Volume properties. Note that when updating labels, the volume’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "operationId": "replace_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_volume_request"
              },
              "example": {
                "name": "new-name",
                "labels": {
                  "labelkey": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_volume_response"
                },
                "example": {
                  "volume": {
                    "id": 4711,
                    "created": "2016-01-30T23:50:11+00:00",
                    "name": "new-name",
                    "server": 12,
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "size": 42,
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "status": "available",
                    "format": "xfs"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "volumes"
        ],
        "summary": "Delete a Volume",
        "description": "Deletes a volume. All Volume data is irreversibly destroyed. The Volume must not be attached to a Server and it must not have delete protection enabled.",
        "operationId": "delete_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TODO"
          }
        }
      }
    },
    "/volumes/{id}/actions": {
      "get": {
        "tags": [
          "volumes"
        ],
        "summary": "Get all Actions for a Volume",
        "description": "Returns all Action objects for a Volume. You can sort the results by using the sort URI parameter, and filter them with the status parameter.",
        "operationId": "list_actions_for_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_volume_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "attach_volume",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 13,
                          "type": "volume"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/volumes/{id}/actions/{action_id}": {
      "get": {
        "tags": [
          "volumes"
        ],
        "summary": "Get an Action for a Volume",
        "description": "Returns a specific Action for a Volume.",
        "operationId": "get_action_for_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_volume_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_volume",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volumes/{id}/actions/attach": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Attach Volume to a Server",
        "description": "Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.",
        "operationId": "attach_volume_to_server",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_volume_to_server_request"
              },
              "example": {
                "server": 43,
                "automount": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attach_volume_to_server_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 43,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volumes/{id}/actions/detach": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Detach Volume",
        "description": "Detaches a Volume from the Server it’s attached to. You may attach it to a Server again at a later time.",
        "operationId": "detach_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/detach_volume_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volumes/{id}/actions/resize": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Resize Volume",
        "description": "Changes the size of a Volume. Note that downsizing a Volume is not possible.",
        "operationId": "resize_volume",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resize_volume_request"
              },
              "example": {
                "size": 50
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resize_volume_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "resize_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volumes/{id}/actions/change_protection": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Change Volume Protection",
        "description": "Changes the protection configuration of a Volume.",
        "operationId": "change_volume_protection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_volume_protection_request"
              },
              "example": {
                "delete": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "TODO",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/change_volume_protection_response"
                },
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}