{
  "openapi": "3.0.3",
  "info": {
    "title": "Hetzner Cloud API",
    "description": "Copied from the official API documentation for the Public Hetzner Cloud.",
    "contact": {
      "url": "https://docs.hetzner.cloud/"
    },
    "version": "454b17a-dirty"
  },
  "servers": [
    {
      "url": "https://api.hetzner.cloud/v1",
      "description": "Official production server"
    }
  ],
  "components": {
    "schemas": {
      "action": {
        "title": "Action",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Action",
            "example": 13
          },
          "command": {
            "type": "string",
            "description": "Command executed in the Action",
            "example": "start_server"
          },
          "status": {
            "type": "string",
            "enum": [
              "error",
              "running",
              "success"
            ],
            "description": "Status of the Action"
          },
          "progress": {
            "type": "number",
            "description": "Progress of Action in percent",
            "example": 100
          },
          "started": {
            "type": "string",
            "description": "Point in time when the Action was started (in ISO-8601 format)",
            "example": "2016-01-30T23:55:00+00:00"
          },
          "finished": {
            "type": "string",
            "nullable": true,
            "description": "Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.",
            "example": "2016-01-30T23:56:00+00:00"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resource"
            },
            "description": "Resources the Action relates to"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        },
        "required": [
          "id",
          "command",
          "status",
          "progress",
          "started",
          "finished",
          "resources",
          "error"
        ],
        "description": "Actions show the results and progress of asynchronous requests to the API."
      },
      "add_route_to_network_request": {
        "$ref": "#/components/schemas/route"
      },
      "add_route_to_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route"
      },
      "add_service_request": {
        "$ref": "#/components/schemas/service"
      },
      "add_service_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_service"
      },
      "add_subnet_to_network_request": {
        "$ref": "#/components/schemas/subnet"
      },
      "add_subnet_to_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_subnet"
      },
      "add_target_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ip",
              "label_selector",
              "server"
            ],
            "description": "Type of the resource"
          },
          "server": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Server",
                "example": 80
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "description": "Configuration for type Server, required if type is `server`"
          },
          "use_private_ip": {
            "type": "boolean",
            "description": "Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network. Default value is false.",
            "example": true
          },
          "label_selector": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "Label selector",
                "example": "env=prod"
              }
            },
            "required": [
              "selector"
            ],
            "description": "Configuration for label selector targets, required if type is `label_selector`"
          },
          "ip": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "description": "IP of a server that belongs to the same customer (public IPv4/IPv6).",
                "example": "203.0.113.1"
              }
            },
            "required": [
              "ip"
            ],
            "description": "IP targets where the traffic should be routed through. Currently it is only possible to use the IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well."
          }
        },
        "required": [
          "type"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_target"
      },
      "add_target_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/add_target"
      },
      "assign_floating_ip_to_server_request": {
        "type": "object",
        "properties": {
          "server": {
            "type": "integer",
            "description": "ID of the Server the Floating IP shall be assigned to",
            "example": 42
          }
        },
        "required": [
          "server"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/assign"
      },
      "assign_floating_ip_to_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/assign"
      },
      "attach_iso_to_server_request": {
        "type": "object",
        "properties": {
          "iso": {
            "type": "string",
            "description": "ID or name of ISO to attach to the Server as listed in GET `/isos`",
            "example": "FreeBSD-11.0-RELEASE-amd64-dvd1"
          }
        },
        "required": [
          "iso"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_iso"
      },
      "attach_iso_to_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_iso"
      },
      "attach_load_balancer_to_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing network to attach the Load Balancer to",
            "example": 4711
          },
          "ip": {
            "type": "string",
            "description": "IP to request to be assigned to this Load Balancer; if you do not provide this then you will be auto assigned an IP address",
            "example": "10.0.1.1"
          }
        },
        "required": [
          "network"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/attach_to_network"
      },
      "attach_load_balancer_to_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/attach_to_network"
      },
      "attach_server_to_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing network to attach the Server to",
            "example": 4711
          },
          "ip": {
            "type": "string",
            "description": "IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address",
            "example": "10.0.1.1"
          },
          "alias_ips": {
            "type": "array",
            "description": "Additional IPs to be assigned to this Server",
            "items": {
              "type": "string"
            },
            "example": [
              "10.0.1.2"
            ]
          }
        },
        "required": [
          "network"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network"
      },
      "attach_server_to_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/attach_to_network"
      },
      "attach_volume_to_server_request": {
        "type": "object",
        "properties": {
          "server": {
            "type": "integer",
            "description": "ID of the Server the Volume will be attached to",
            "example": 43
          },
          "automount": {
            "type": "boolean",
            "description": "Auto-mount the Volume after attaching it",
            "example": false
          }
        },
        "required": [
          "server"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/attach"
      },
      "attach_volume_to_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/attach"
      },
      "certificate": {
        "title": "Certificate",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Certificate",
            "example": 897
          },
          "name": {
            "type": "string",
            "description": "Unique name of the Certificate",
            "example": "my website cert"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "certificate": {
            "type": "string",
            "description": "Certificate and chain in PEM format, in order so that each record directly certifies the one preceding",
            "example": "-----BEGIN CERTIFICATE-----\n..."
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Certificate was created (in ISO-8601 format)",
            "example": "2019-01-08T12:10:00+00:00"
          },
          "not_valid_before": {
            "type": "string",
            "description": "Point in time when the Certificate becomes valid (in ISO-8601 format)",
            "example": "2019-01-08T10:00:00+00:00"
          },
          "not_valid_after": {
            "type": "string",
            "description": "Point in time when the Certificate stops being valid (in ISO-8601 format)",
            "example": "2019-07-08T09:59:59+00:00"
          },
          "domain_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "example.com",
              "webmail.example.com",
              "www.example.com"
            ],
            "description": "Domains and subdomains covered by the Certificate"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint of the Certificate",
            "example": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f"
          },
          "used_by": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resource"
            },
            "description": "Resources currently using the Certificate."
          }
        },
        "required": [
          "id",
          "name",
          "labels",
          "certificate",
          "created",
          "not_valid_before",
          "not_valid_after",
          "domain_names",
          "fingerprint",
          "used_by"
        ],
        "description": "TLS/SSL Certificates prove the identity of a Server and are used to encrypt client traffic."
      },
      "change_algorithm_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "least_connections",
              "round_robin"
            ],
            "description": "Algorithm of the Load Balancer"
          }
        },
        "required": [
          "type"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_algorithm"
      },
      "change_algorithm_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_algorithm"
      },
      "change_alias_ips_of_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing Network already attached to the Server",
            "example": 4711
          },
          "alias_ips": {
            "type": "array",
            "description": "New alias IPs to set for this Server",
            "items": {
              "type": "string"
            },
            "example": [
              "10.0.1.2"
            ]
          }
        },
        "required": [
          "network",
          "alias_ips"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_alias_ips"
      },
      "change_alias_ips_of_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_alias_ips"
      },
      "change_floating_ip_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Floating IP from being deleted",
            "example": true
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_protection"
      },
      "change_floating_ip_protection_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_protection"
      },
      "change_image_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the snapshot from being deleted",
            "example": true
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/images/{id}/actions/change_protection"
      },
      "change_image_protection_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/images/{id}/actions/change_protection"
      },
      "change_ip_range_of_network_request": {
        "type": "object",
        "properties": {
          "ip_range": {
            "type": "string",
            "description": "The new prefix for the whole Network",
            "example": "10.0.0.0/12"
          }
        },
        "required": [
          "ip_range"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_ip_range"
      },
      "change_ip_range_of_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_ip_range"
      },
      "change_load_balancer_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Load Balancer from being deleted",
            "example": true
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_protection"
      },
      "change_load_balancer_protection_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_protection"
      },
      "change_network_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Network from being deleted",
            "example": true
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_protection"
      },
      "change_network_protection_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/change_protection"
      },
      "change_reverse_dns_entry_for_floating_ip_request": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address for which to set the reverse DNS entry",
            "example": "1.2.3.4"
          },
          "dns_ptr": {
            "type": "string",
            "description": "Hostname to set as a reverse DNS PTR entry, will reset to original default value if `null`",
            "nullable": true,
            "example": "server02.example.com"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_entry_for_floating_ip_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_entry_for_this_server_request": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "Primary IP address for which the reverse DNS entry should be set",
            "example": "1.2.3.4"
          },
          "dns_ptr": {
            "type": "string",
            "description": "Hostname to set as a reverse DNS PTR entry, reset to original value if `null`",
            "nullable": true,
            "example": "server01.example.com"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr"
      },
      "change_reverse_dns_entry_for_this_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_dns_ptr"
      },
      "change_server_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Server from being deleted (currently delete and rebuild attribute needs to have the same value)",
            "example": true
          },
          "rebuild": {
            "type": "boolean",
            "description": "If true, prevents the Server from being rebuilt (currently delete and rebuild attribute needs to have the same value)",
            "example": true
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_protection"
      },
      "change_server_protection_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_protection"
      },
      "change_type_of_load_balancer_request": {
        "type": "object",
        "properties": {
          "load_balancer_type": {
            "type": "string",
            "description": "ID or name of Load Balancer type the Load Balancer should migrate to",
            "example": "lb21"
          }
        },
        "required": [
          "load_balancer_type"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_type"
      },
      "change_type_of_load_balancer_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/change_type"
      },
      "change_type_of_server_request": {
        "type": "object",
        "properties": {
          "upgrade_disk": {
            "type": "boolean",
            "description": "If false, do not upgrade the disk (this allows downgrading the Server type later)",
            "example": true
          },
          "server_type": {
            "type": "string",
            "description": "ID or name of Server type the Server should migrate to",
            "example": "cx11"
          }
        },
        "required": [
          "upgrade_disk",
          "server_type"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type"
      },
      "change_type_of_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/change_type"
      },
      "change_volume_protection_request": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Volume from being deleted",
            "example": true
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/change_protection"
      },
      "change_volume_protection_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/change_protection"
      },
      "create_certificate_request": {
        "title": "CreateCertificate",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Certificate",
            "example": "my website cert"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "certificate": {
            "type": "string",
            "description": "Certificate and chain in PEM format, in order so that each record directly certifies the one preceding",
            "example": "-----BEGIN CERTIFICATE-----\n..."
          },
          "private_key": {
            "type": "string",
            "description": "Certificate key in PEM format",
            "example": "-----BEGIN PRIVATE KEY-----\n..."
          }
        },
        "required": [
          "name",
          "certificate",
          "private_key"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/certificates"
      },
      "create_certificate_response": {
        "title": "CertificateResponse",
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificate"
          }
        },
        "required": [
          "certificate"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/certificates"
      },
      "create_floating_ip_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Floating IP type"
          },
          "server": {
            "type": "integer",
            "description": "Server to assign the Floating IP to",
            "example": 42
          },
          "home_location": {
            "type": "string",
            "description": "Home Location (routing is optimized for that Location). Only optional if Server argument is passed.",
            "example": "fsn1"
          },
          "description": {
            "type": "string",
            "example": "Web Frontend"
          },
          "name": {
            "type": "string",
            "example": "Web Frontend"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "required": [
          "type"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/floating_ips"
      },
      "create_floating_ip_response": {
        "type": "object",
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "floating_ip"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips"
      },
      "create_image_from_server_request": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Image, will be auto-generated if not set",
            "example": "my image"
          },
          "type": {
            "type": "string",
            "enum": [
              "backup",
              "snapshot"
            ],
            "description": "Type of Image to create (default: `snapshot`)",
            "example": "snapshot"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/create_image"
      },
      "create_image_from_server_response": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/create_image"
      },
      "create_load_balancer_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Load Balancer",
            "example": "Web Frontend"
          },
          "load_balancer_type": {
            "type": "string",
            "description": "ID or name of the Load Balancer type this Load Balancer should be created with",
            "example": "lb11"
          },
          "algorithm": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "least_connections",
                  "round_robin"
                ],
                "description": "Type of the algorithm"
              }
            },
            "required": [
              "type"
            ],
            "description": "Algorithm of the Load Balancer"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/service"
            },
            "description": "Array of services"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/target"
            },
            "description": "Array of targets"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "public_interface": {
            "type": "boolean",
            "description": "Enable or disable the public interface of the Load Balancer",
            "example": true
          },
          "network": {
            "type": "integer",
            "description": "ID of the network the Load Balancer should be attached to on creation",
            "example": 123
          }
        },
        "required": [
          "name",
          "load_balancer_type",
          "algorithm"
        ],
        "oneOf": [
          {
            "properties": {
              "network_zone": {
                "type": "string",
                "description": "Name of network zone",
                "example": "eu-central"
              }
            }
          },
          {
            "properties": {
              "location": {
                "type": "string",
                "description": "ID or name of Location to create Load Balancer in"
              }
            }
          }
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers"
      },
      "create_load_balancer_response": {
        "type": "object",
        "properties": {
          "load_balancer": {
            "$ref": "#/components/schemas/load_balancer"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "load_balancer",
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers"
      },
      "create_network_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the network",
            "example": "mynet"
          },
          "ip_range": {
            "type": "string",
            "description": "IP range of the whole network which must span all included subnets. Must be one of the private IPv4 ranges of RFC1918. Minimum network size is /24. We highly recommend that you pick a larger network with a /16 netmask.",
            "example": "10.0.0.0/16"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "subnets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subnet"
            },
            "description": "Array of subnets allocated."
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/route"
            },
            "description": "Array of routes set in this network. The destination of the route must be one of the private IPv4 ranges of RFC1918. The gateway must be a subnet/IP of the ip_range of the network object. The destination must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. The gateway cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1."
          }
        },
        "required": [
          "name",
          "ip_range"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/networks"
      },
      "create_network_response": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "description": "Response to POST https://api.hetzner.cloud/v1/networks"
      },
      "create_server_request": {
        "type": "object",
        "title": "CreateServerRequest",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123)",
            "example": "my-server"
          },
          "location": {
            "type": "string",
            "description": "ID or name of Location to create Server in (must not be used together with datacenter)",
            "example": "nbg1"
          },
          "datacenter": {
            "type": "string",
            "description": "ID or name of Datacenter to create Server in (must not be used together with location)",
            "example": "nbg1-dc3"
          },
          "server_type": {
            "type": "string",
            "description": "ID or name of the Server type this Server should be created with",
            "example": "cx11"
          },
          "start_after_create": {
            "type": "boolean",
            "description": "Start Server right after creation. Defaults to true.",
            "example": true
          },
          "image": {
            "type": "string",
            "description": "ID or name of the Image the Server is created from",
            "example": "ubuntu-20.04"
          },
          "ssh_keys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "SSH key IDs or names which should be injected into the Server at creation time",
            "example": [
              "my-ssh-key"
            ]
          },
          "volumes": {
            "type": "array",
            "description": "Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "networks": {
            "type": "array",
            "description": "Network IDs which should be attached to the Server private network interface at the creation time",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "user_data": {
            "type": "string",
            "description": "Cloud-Init user data to use during Server creation. This field is limited to 32KiB.",
            "example": "#cloud-config\nruncmd:\n- [touch, /root/cloud-init-worked]\n"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "automount": {
            "type": "boolean",
            "description": "Auto-mount Volumes after attach",
            "example": false
          }
        },
        "required": [
          "name",
          "server_type",
          "image"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers"
      },
      "create_server_response": {
        "type": "object",
        "title": "CreateServerResponse",
        "properties": {
          "server": {
            "$ref": "#/components/schemas/server"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "next_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          },
          "root_password": {
            "type": "string",
            "nullable": true,
            "description": "Root password when no SSH keys have been specified",
            "example": "YItygq1v3GYjjMomLaKc"
          }
        },
        "required": [
          "server",
          "action",
          "next_actions",
          "root_password"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers"
      },
      "create_ssh_key_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the SSH key",
            "example": "My ssh key"
          },
          "public_key": {
            "type": "string",
            "description": "Public key",
            "example": "ssh-rsa AAAjjk76kgf...Xt"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "required": [
          "name",
          "public_key"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/ssh_keys"
      },
      "create_ssh_key_response": {
        "type": "object",
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/ssh_keys"
      },
      "create_volume_request": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "Size of the Volume in GB",
            "example": 42
          },
          "name": {
            "type": "string",
            "description": "Name of the volume",
            "example": "databases-storage"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "automount": {
            "type": "boolean",
            "description": "Auto-mount Volume after attach. `server` must be provided.",
            "example": false
          },
          "format": {
            "type": "string",
            "description": "Format Volume after creation. One of: `xfs`, `ext4`",
            "example": "xfs"
          }
        },
        "required": [
          "size",
          "name"
        ],
        "oneOf": [
          {
            "properties": {
              "location": {
                "type": "string",
                "description": "Location to create the Volume in (can be omitted if Server is specified)",
                "example": "nbg1"
              }
            }
          },
          {
            "properties": {
              "server": {
                "type": "number",
                "description": "Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server)"
              }
            }
          }
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes"
      },
      "create_volume_response": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          },
          "next_actions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of the Action",
                  "example": 13
                },
                "command": {
                  "type": "string",
                  "description": "Command executed in the Action",
                  "example": "start_server"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "error",
                    "running",
                    "success"
                  ],
                  "description": "Status of the Action"
                },
                "progress": {
                  "type": "number",
                  "description": "Progress of Action in percent",
                  "example": 100
                },
                "started": {
                  "type": "string",
                  "description": "Point in time when the Action was started (in ISO-8601 format)",
                  "example": "2016-01-30T23:55:00+00:00"
                },
                "finished": {
                  "type": "string",
                  "nullable": true,
                  "description": "Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.",
                  "example": "2016-01-30T23:56:00+00:00"
                },
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/resource"
                  },
                  "description": "Resources the Action relates to"
                },
                "error": {
                  "$ref": "#/components/schemas/error"
                }
              },
              "required": [
                "id",
                "command",
                "status",
                "progress",
                "started",
                "finished",
                "resources",
                "error"
              ]
            }
          }
        },
        "required": [
          "volume",
          "action",
          "next_actions"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes"
      },
      "created_from": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Server the Image was created from",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Server name at the time the Image was created",
            "example": "Server"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "Information about the Server the Image was created from",
        "nullable": true
      },
      "datacenter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Datacenter",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Datacenter",
            "example": "fsn1-dc8"
          },
          "description": {
            "type": "string",
            "description": "Description of the Datacenter",
            "example": "Falkenstein DC Park 8"
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "server_types": {
            "type": "object",
            "properties": {
              "supported": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of Server types that are supported in the Datacenter",
                "example": [
                  1,
                  2,
                  3
                ]
              },
              "available": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of Server types that are supported and for which the Datacenter has enough resources left",
                "example": [
                  1,
                  2,
                  3
                ]
              },
              "available_for_migration": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "IDs of Server types that are supported and for which the Datacenter has enough resources left",
                "example": [
                  1,
                  2,
                  3
                ]
              }
            },
            "required": [
              "supported",
              "available",
              "available_for_migration"
            ],
            "description": "The Server types the Datacenter can handle"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "location",
          "server_types"
        ],
        "description": "Datacenter this Server is located at"
      },
      "delete_route_from_network_request": {
        "$ref": "#/components/schemas/route"
      },
      "delete_route_from_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route"
      },
      "delete_server_response": {
        "type": "object",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "description": "Response to DELETE https://api.hetzner.cloud/v1/servers/{id}"
      },
      "delete_service_request": {
        "type": "object",
        "properties": {
          "listen_port": {
            "type": "integer",
            "description": "The listen port of the service you want to delete",
            "example": 4711
          }
        },
        "required": [
          "listen_port"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/delete_service"
      },
      "delete_service_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/delete_service"
      },
      "delete_subnet_from_network_request": {
        "type": "object",
        "properties": {
          "ip_range": {
            "type": "string",
            "description": "IP range of subnet to delete",
            "example": "10.0.1.0/24"
          }
        },
        "required": [
          "ip_range"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_subnet"
      },
      "delete_subnet_from_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_subnet"
      },
      "detach_iso_from_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_iso"
      },
      "detach_load_balancer_from_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing network to detach the Load Balancer from",
            "example": 4711
          }
        },
        "required": [
          "network"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/detach_from_network"
      },
      "detach_load_balancer_from_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/detach_from_network"
      },
      "detach_server_from_network_request": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "description": "ID of an existing network to detach the Server from",
            "example": 4711
          }
        },
        "required": [
          "network"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_from_network"
      },
      "detach_server_from_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/detach_from_network"
      },
      "detach_volume_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/detach"
      },
      "disable_backups_for_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/disable_backup"
      },
      "disable_public_interface_of_load_balancer_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/disable_public_interface"
      },
      "disable_rescue_mode_for_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/disable_rescue"
      },
      "dns_ptr": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "Single IPv4 or IPv6 address | Single IPv6 address of this Server for which the reverse DNS entry has been set up",
            "example": "2001:db8::1"
          },
          "dns_ptr": {
            "type": "string",
            "description": "DNS pointer for the specific IP address",
            "example": "server.example.com"
          }
        },
        "required": [
          "ip",
          "dns_ptr"
        ]
      },
      "enable_and_configure_backups_for_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_backup"
      },
      "enable_public_interface_of_load_balancer_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/enable_public_interface"
      },
      "enable_rescue_mode_for_server_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "freebsd64",
              "linux32",
              "linux64"
            ],
            "description": "Type of rescue system to boot (default: `linux64`)"
          },
          "ssh_keys": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of SSH key IDs which should be injected into the rescue system. Only available for types: `linux64` and `linux32`.",
            "example": [
              2323
            ]
          }
        },
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue"
      },
      "enable_rescue_mode_for_server_response": {
        "type": "object",
        "properties": {
          "root_password": {
            "type": "string",
            "description": "Password that will be set for this Server once the Action succeeds",
            "example": "zCWbFhnu950dUTko5f40"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/enable_rescue"
      },
      "error": {
        "type": "object",
        "nullable": true,
        "properties": {
          "code": {
            "type": "string",
            "description": "Fixed machine readable code",
            "example": "action_failed"
          },
          "message": {
            "type": "string",
            "description": "Humanized error message",
            "example": "Action failed"
          }
        },
        "required": [
          "code",
          "message"
        ],
        "description": "Error message for the Action if error occurred, otherwise null"
      },
      "floating_ip": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Floating IP",
            "example": 4711
          },
          "name": {
            "type": "string",
            "description": "Unique name of the Floating IP",
            "example": "Web Frontend"
          },
          "description": {
            "type": "string",
            "description": "Description of the Floating IP",
            "nullable": true,
            "example": "Web Frontend"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the Floating IP",
            "example": "131.232.99.1"
          },
          "type": {
            "type": "string",
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Type of the Floating IP"
          },
          "server": {
            "type": "integer",
            "description": "ID of the Server the Floating IP is assigned to, null if it is not assigned at all",
            "nullable": true,
            "example": 42
          },
          "dns_ptr": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dns_ptr"
            },
            "description": "Array of reverse DNS entries"
          },
          "home_location": {
            "$ref": "#/components/schemas/location"
          },
          "blocked": {
            "type": "boolean",
            "description": "Whether the IP is blocked",
            "example": false
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Floating IP from being deleted",
                "example": false
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Floating IP"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Floating IP was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "ip",
          "type",
          "server",
          "dns_ptr",
          "home_location",
          "blocked",
          "protection",
          "labels",
          "created"
        ]
      },
      "get_action_for_floating_ip_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}/actions/{action_id}"
      },
      "get_action_for_image_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/images/{id}/actions/{action_id}"
      },
      "get_action_for_load_balancer_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/actions/{action_id}"
      },
      "get_action_for_network_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/networks/{id}/actions/{action_id}"
      },
      "get_action_for_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}/actions/{action_id}"
      },
      "get_action_for_volume_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes/{id}/actions/{action_id}"
      },
      "get_action_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/actions/{id}"
      },
      "get_certificate_response": {
        "title": "CertificateResponse",
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificate"
          }
        },
        "required": [
          "certificate"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/certificates/{id}"
      },
      "get_datacenter_response": {
        "type": "object",
        "properties": {
          "datacenter": {
            "$ref": "#/components/schemas/datacenter"
          }
        },
        "required": [
          "datacenter"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/datacenters/{id}"
      },
      "get_floating_ip_response": {
        "type": "object",
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          }
        },
        "required": [
          "floating_ip"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}"
      },
      "get_image_response": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          }
        },
        "description": "Response to GET https://api.hetzner.cloud/v1/images/{id}"
      },
      "get_iso_response": {
        "type": "object",
        "properties": {
          "iso": {
            "$ref": "#/components/schemas/iso"
          }
        },
        "required": [
          "iso"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/isos/{id}"
      },
      "get_load_balancer_response": {
        "type": "object",
        "properties": {
          "load_balancer": {
            "$ref": "#/components/schemas/load_balancer"
          }
        },
        "required": [
          "load_balancer"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}"
      },
      "get_load_balancer_type_response": {
        "type": "object",
        "properties": {
          "load_balancer_type": {
            "$ref": "#/components/schemas/load_balancer_type"
          }
        },
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancer_types/{id}"
      },
      "get_location_response": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/location"
          }
        },
        "required": [
          "location"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/locations/{id}"
      },
      "get_metrics_for_loadbalancer_response": {
        "type": "object",
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/metrics"
          }
        },
        "required": [
          "metrics"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/metrics"
      },
      "get_metrics_for_server_response": {
        "type": "object",
        "properties": {
          "metrics": {
            "$ref": "#/components/schemas/metrics"
          }
        },
        "required": [
          "metrics"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}/metrics"
      },
      "get_network_response": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "description": "Response to GET https://api.hetzner.cloud/v1/networks/{id}"
      },
      "get_server_response": {
        "type": "object",
        "properties": {
          "server": {
            "$ref": "#/components/schemas/server"
          }
        },
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}"
      },
      "get_server_type_response": {
        "type": "object",
        "properties": {
          "server_type": {
            "$ref": "#/components/schemas/server_type"
          }
        },
        "required": [
          "server_type"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/server_types/{id}"
      },
      "get_ssh_key_response": {
        "type": "object",
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/ssh_keys/{id}"
      },
      "get_volume_response": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          }
        },
        "required": [
          "volume"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes/{id}"
      },
      "health_status": {
        "type": "object",
        "properties": {
          "listen_port": {
            "type": "integer",
            "example": 443
          },
          "status": {
            "type": "string",
            "example": "healthy"
          }
        }
      },
      "http": {
        "type": "object",
        "properties": {
          "cookie_name": {
            "type": "string",
            "description": "Name of the cookie used for sticky sessions",
            "example": "HCLBSTICKY"
          },
          "cookie_lifetime": {
            "type": "integer",
            "description": "Lifetime of the cookie used for sticky sessions",
            "example": 300
          },
          "certificates": {
            "type": "array",
            "description": "IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is \"http\"",
            "items": {
              "type": "integer"
            },
            "example": [
              897
            ]
          },
          "redirect_http": {
            "type": "boolean",
            "description": "Redirect HTTP requests to HTTPS. Only available if protocol is \"https\". Default `false`",
            "example": true
          },
          "sticky_sessions": {
            "type": "boolean",
            "description": "Use sticky sessions. Only available if protocol is \"http\" or \"https\". Default `false`",
            "example": true
          }
        },
        "required": [
          "cookie_name",
          "cookie_lifetime"
        ],
        "description": "Configuration option for protocols http and https"
      },
      "image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Image",
            "example": 4711
          },
          "type": {
            "type": "string",
            "enum": [
              "backup",
              "snapshot",
              "system",
              "temporary"
            ],
            "description": "Type of the Image",
            "example": "snapshot"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "creating"
            ],
            "description": "Whether the Image can be used or if it's still being created"
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Image. This value is only set for system Images.",
            "nullable": true,
            "example": "ubuntu-20.04"
          },
          "description": {
            "type": "string",
            "description": "Description of the Image",
            "example": "Ubuntu 20.04 Standard 64 bit"
          },
          "image_size": {
            "type": "number",
            "description": "Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.",
            "nullable": true,
            "example": 2.3
          },
          "disk_size": {
            "type": "number",
            "description": "Size of the disk contained in the Image in GB",
            "example": 10
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Image was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00"
          },
          "created_from": {
            "$ref": "#/components/schemas/created_from"
          },
          "bound_to": {
            "type": "integer",
            "description": "ID of Server the Image is bound to. Only set for Images of type `backup`.",
            "nullable": true,
            "example": null
          },
          "os_flavor": {
            "type": "string",
            "enum": [
              "centos",
              "debian",
              "fedora",
              "ubuntu",
              "unknown"
            ],
            "description": "Flavor of operating system contained in the Image",
            "example": "ubuntu"
          },
          "os_version": {
            "type": "string",
            "description": "Operating system version",
            "nullable": true,
            "example": "20.04"
          },
          "rapid_deploy": {
            "type": "boolean",
            "description": "Indicates that rapid deploy of the Image is available",
            "example": false
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the snapshot from being deleted",
                "example": false
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Image"
          },
          "deprecated": {
            "type": "string",
            "description": "Point in time when the Image is considered to be deprecated (in ISO-8601 format)",
            "nullable": true,
            "example": "2018-02-28T00:00:00+00:00"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "required": [
          "id",
          "type",
          "status",
          "name",
          "description",
          "image_size",
          "disk_size",
          "created",
          "created_from",
          "bound_to",
          "os_flavor",
          "os_version",
          "protection",
          "deprecated",
          "labels"
        ]
      },
      "ipv4": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address (v4) of this Server",
            "example": "1.2.3.4"
          },
          "blocked": {
            "type": "boolean",
            "description": "If the IP is blocked by our anti abuse dept",
            "example": false
          },
          "dns_ptr": {
            "type": "string",
            "description": "Reverse DNS PTR entry for the IPv4 addresses of this Server",
            "example": "server01.example.com"
          }
        },
        "required": [
          "ip",
          "blocked",
          "dns_ptr"
        ],
        "description": "IP address (v4) and its reverse DNS entry of this Server"
      },
      "ipv6": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address (v4) of this Server",
            "example": "2001:db8::/64"
          },
          "blocked": {
            "type": "boolean",
            "description": "If the IP is blocked by our anti abuse dept",
            "example": false
          },
          "dns_ptr": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dns_ptr"
            },
            "description": "Reverse DNS PTR entries for the IPv6 addresses of this Server, `null` by default",
            "nullable": true
          }
        },
        "required": [
          "ip",
          "blocked",
          "dns_ptr"
        ],
        "description": "IPv6 network assigned to this Server and its reverse DNS entry"
      },
      "iso": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the ISO",
            "example": 4711
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the ISO. Only set for public ISOs",
            "nullable": true,
            "example": "FreeBSD-11.0-RELEASE-amd64-dvd1"
          },
          "description": {
            "type": "string",
            "description": "Description of the ISO",
            "example": "FreeBSD 11.0 x64"
          },
          "type": {
            "type": "string",
            "enum": [
              "private",
              "public"
            ],
            "description": "Type of the ISO"
          },
          "deprecated": {
            "type": "string",
            "description": "ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.",
            "nullable": true,
            "example": "2018-02-28T00:00:00+00:00"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "deprecated"
        ]
      },
      "iso_optional": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the ISO",
            "example": 4711
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Unique identifier of the ISO. Only set for public ISOs",
            "example": "FreeBSD-11.0-RELEASE-amd64-dvd1"
          },
          "description": {
            "type": "string",
            "description": "Description of the ISO",
            "example": "FreeBSD 11.0 x64"
          },
          "type": {
            "type": "string",
            "enum": [
              "private",
              "public"
            ],
            "description": "Type of the ISO"
          },
          "deprecated": {
            "type": "string",
            "nullable": true,
            "description": "ISO 8601 timestamp of deprecation, null if ISO is still available. After the deprecation time it will no longer be possible to attach the ISO to Servers.",
            "example": "2018-02-28T00:00:00+00:00"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "type",
          "deprecated"
        ],
        "description": "ISO Image that is attached to this Server. Null if no ISO is attached.",
        "nullable": true
      },
      "labels": {
        "type": "object",
        "description": "User-defined labels (key-value pairs)",
        "additionalProperties": {
          "type": "string",
          "pattern": "^(()|[a-z0-9A-Z]|([a-z0-9A-Z][a-z0-9A-Z\\._-]{0,61}[a-z0-9A-Z]))$"
        }
      },
      "list_actions_for_floating_ip_response": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips/{id}/actions"
      },
      "list_actions_for_image_response": {
        "type": "object",
        "title": "ActionsResponse",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/images/{id}/actions"
      },
      "list_actions_for_load_balancer_response": {
        "type": "object",
        "title": "ActionsResponse",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers/{id}/actions"
      },
      "list_actions_for_network_response": {
        "type": "object",
        "title": "ActionsResponse",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/networks/{id}/actions"
      },
      "list_actions_for_server_response": {
        "type": "object",
        "title": "ActionsResponse",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/servers/{id}/actions"
      },
      "list_actions_for_volume_response": {
        "type": "object",
        "title": "ActionsResponse",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes/{id}/actions"
      },
      "list_actions_response": {
        "type": "object",
        "title": "ActionsResponse",
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/action"
            }
          }
        },
        "required": [
          "actions"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/actions"
      },
      "list_certificates_response": {
        "title": "CertificatesResponse",
        "type": "object",
        "properties": {
          "certificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/certificate"
            }
          }
        },
        "required": [
          "certificates"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/certificates"
      },
      "list_datacenters_response": {
        "type": "object",
        "properties": {
          "datacenters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/datacenter"
            }
          },
          "recommendation": {
            "type": "integer",
            "description": "The Datacenter which is recommended to be used to create new Servers.",
            "example": 1
          }
        },
        "required": [
          "datacenters",
          "recommendation"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/datacenters"
      },
      "list_floating_ips_response": {
        "type": "object",
        "properties": {
          "floating_ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/floating_ip"
            }
          }
        },
        "required": [
          "floating_ips"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/floating_ips"
      },
      "list_images_response": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/image"
            }
          }
        },
        "required": [
          "images"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/images"
      },
      "list_isos_response": {
        "type": "object",
        "properties": {
          "isos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/iso"
            }
          }
        },
        "required": [
          "isos"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/isos"
      },
      "list_load_balancer_types_response": {
        "type": "object",
        "properties": {
          "load_balancer_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/load_balancer_type"
            }
          }
        },
        "required": [
          "load_balancer_types"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancer_types"
      },
      "list_load_balancers_response": {
        "type": "object",
        "properties": {
          "load_balancers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/load_balancer"
            }
          }
        },
        "required": [
          "load_balancers"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/load_balancers"
      },
      "list_locations_response": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/location"
            }
          }
        },
        "required": [
          "locations"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/locations"
      },
      "list_networks_response": {
        "type": "object",
        "properties": {
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/network"
            }
          }
        },
        "required": [
          "networks"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/networks"
      },
      "list_prices_response": {
        "type": "object",
        "properties": {
          "pricing": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string",
                "description": "Currency the returned prices are expressed in, coded according to ISO 4217",
                "example": "EUR"
              },
              "vat_rate": {
                "type": "string",
                "description": "The VAT rate used for calculating prices with VAT",
                "example": "19.000000"
              },
              "image": {
                "type": "object",
                "properties": {
                  "price_per_gb_month": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_gb_month"
                ],
                "description": "The cost of Image per GB/month"
              },
              "floating_ip": {
                "type": "object",
                "properties": {
                  "price_monthly": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_monthly"
                ],
                "description": "The cost of one Floating IP per month"
              },
              "traffic": {
                "type": "object",
                "properties": {
                  "price_per_tb": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_tb"
                ],
                "description": "The cost of additional traffic per TB"
              },
              "server_backup": {
                "type": "object",
                "properties": {
                  "percentage": {
                    "type": "string",
                    "description": "Percentage by how much the base price will increase",
                    "example": "20.0000000000"
                  }
                },
                "required": [
                  "percentage"
                ],
                "description": "Will increase base Server costs by specific percentage"
              },
              "volume": {
                "type": "object",
                "properties": {
                  "price_per_gb_month": {
                    "$ref": "#/components/schemas/price"
                  }
                },
                "required": [
                  "price_per_gb_month"
                ],
                "description": "The cost of Volume per GB/month"
              },
              "server_types": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of the Server type the price is for",
                      "example": 4
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the Server type the price is for",
                      "example": "cx11"
                    },
                    "prices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time"
                      },
                      "description": "Server type costs per Location"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "prices"
                  ]
                },
                "description": "Costs of Server types per Location and type"
              },
              "load_balancer_types": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of the Load Balancer type the price is for",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "Name of the Load Balancer type the price is for",
                      "example": "lb11"
                    },
                    "prices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/price_per_time"
                      },
                      "description": "Load Balancer type costs per Location"
                    }
                  },
                  "required": [
                    "id",
                    "name",
                    "prices"
                  ]
                },
                "description": "Costs of Load Balancer types per Location and type"
              }
            },
            "required": [
              "currency",
              "vat_rate",
              "image",
              "floating_ip",
              "traffic",
              "server_backup",
              "volume",
              "server_types",
              "load_balancer_types"
            ],
            "additionalProperties": false
          }
        },
        "required": [
          "pricing"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/pricing"
      },
      "list_server_types_response": {
        "type": "object",
        "properties": {
          "server_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server_type"
            }
          }
        },
        "required": [
          "server_types"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/server_types"
      },
      "list_servers_response": {
        "type": "object",
        "properties": {
          "servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server"
            }
          }
        },
        "required": [
          "servers"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/servers"
      },
      "list_ssh_keys_response": {
        "type": "object",
        "properties": {
          "ssh_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ssh_key"
            }
          }
        },
        "required": [
          "ssh_keys"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/ssh_keys"
      },
      "list_volumes_response": {
        "type": "object",
        "properties": {
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volume"
            }
          }
        },
        "required": [
          "volumes"
        ],
        "description": "Response to GET https://api.hetzner.cloud/v1/volumes"
      },
      "load_balancer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Load Balancer",
            "example": 4711
          },
          "name": {
            "type": "string",
            "description": "Unique name of the Load Balancer",
            "example": "Web Frontend"
          },
          "public_net": {
            "$ref": "#/components/schemas/public_net_load_balancer"
          },
          "private_net": {
            "type": "array",
            "description": "Private networks information",
            "items": {
              "$ref": "#/components/schemas/private_net_load_balancer"
            }
          },
          "location": {
            "$ref": "#/components/schemas/location"
          },
          "load_balancer_type": {
            "$ref": "#/components/schemas/load_balancer_type"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Load Balancer from being deleted",
                "example": false
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Load Balancer"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Load Balancer was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/service"
            },
            "description": "List of services that belong to this Load Balancer"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/target"
            },
            "description": "List of targets that belong to this Load Balancer"
          },
          "algorithm": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "least_connections",
                  "round_robin"
                ],
                "description": "Type of the algorithm"
              }
            },
            "required": [
              "type"
            ],
            "description": "Algorithm of the Load Balancer"
          },
          "outgoing_traffic": {
            "type": "integer",
            "nullable": true,
            "description": "Outbound Traffic for the current billing period in bytes",
            "format": "int64"
          },
          "ingoing_traffic": {
            "type": "integer",
            "nullable": true,
            "description": "Inbound Traffic for the current billing period in bytes",
            "format": "int64"
          },
          "included_traffic": {
            "type": "integer",
            "description": "Free Traffic for the current billing period in bytes",
            "example": 10000,
            "format": "int64"
          }
        },
        "required": [
          "id",
          "name",
          "public_net",
          "private_net",
          "location",
          "load_balancer_type",
          "protection",
          "labels",
          "created",
          "services",
          "targets",
          "algorithm",
          "outgoing_traffic",
          "ingoing_traffic",
          "included_traffic"
        ]
      },
      "load_balancer_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Load Balancer type",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Load Balancer type",
            "example": "lb11"
          },
          "description": {
            "type": "string",
            "description": "Description of the Load Balancer type",
            "example": "LB11"
          },
          "max_connections": {
            "type": "integer",
            "description": "Number of maximum simultaneous open connections",
            "example": 20000
          },
          "max_services": {
            "type": "integer",
            "description": "Number of services a Load Balancer of this type can have",
            "example": 5
          },
          "max_targets": {
            "type": "integer",
            "description": "Number of targets a single Load Balancer can have",
            "example": 25
          },
          "max_assigned_certificates": {
            "type": "integer",
            "description": "Number of SSL Certificates that can be assigned to a single Load Balancer",
            "example": 10
          },
          "deprecated": {
            "type": "string",
            "description": "Point in time when the Load Balancer type is deprecated (in ISO-8601 format)",
            "nullable": true,
            "example": "2016-01-30T23:50:00+00:00"
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/price_per_time"
            },
            "description": "Prices in different network zones"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "max_connections",
          "max_services",
          "max_targets",
          "max_assigned_certificates",
          "deprecated",
          "prices"
        ]
      },
      "location": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Location",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Location",
            "example": "fsn1"
          },
          "description": {
            "type": "string",
            "description": "Description of the Location",
            "example": "Faleknstein DC Park 1"
          },
          "country": {
            "type": "string",
            "description": "ISO 3166-1 alpha-2 code of the country the Location resides in",
            "example": "DE"
          },
          "city": {
            "type": "string",
            "description": "City the Location is closest to",
            "example": "Falkenstein"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude of the city closest to the Location",
            "example": 50.47612
          },
          "longitude": {
            "type": "number",
            "description": "Longitude of the city closest to the Location",
            "example": 12.370071
          },
          "network_zone": {
            "type": "string",
            "description": "Name of network zone this Location resides in",
            "example": "eu-central"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "country",
          "city",
          "latitude",
          "longitude",
          "network_zone"
        ],
        "description": "Location where the Datacenter resides in | Location the Floating IP was created in. Routing is optimized for this Location."
      },
      "metrics": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Start of period of metrics reported (in ISO-8601 format)",
            "example": "2017-01-01T00:00:00+00:00"
          },
          "end": {
            "type": "string",
            "description": "End of period of metrics reported (in ISO-8601 format)",
            "example": "2017-01-01T23:00:00+00:00"
          },
          "step": {
            "type": "number",
            "description": "Resolution of results in seconds.",
            "example": 60
          },
          "time_series": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "values": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  },
                  "description": "Metrics Timestamps with values"
                }
              },
              "required": [
                "values"
              ]
            },
            "example": {
              "name_of_timeseries": {
                "values": [
                  [
                    1435781470.622,
                    "42"
                  ],
                  [
                    1435781471.622,
                    "43"
                  ]
                ]
              }
            },
            "description": "Hash with timeseries information, containing the name of timeseries as key"
          }
        },
        "required": [
          "start",
          "end",
          "step",
          "time_series"
        ],
        "description": "You must specify the type of metric to get: open_connections, requests_per_second or bandwidth. You can also specify more than one type by comma separation, e.g. requests_per_second,bandwidth. Depending on the type you will get different time series data."
      },
      "network": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Network",
            "example": 4711
          },
          "name": {
            "type": "string",
            "description": "Name of the Network",
            "example": "mynet"
          },
          "ip_range": {
            "type": "string",
            "description": "IPv4 prefix of the whole Network",
            "example": "10.0.0.0/16"
          },
          "subnets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/subnet_with_gateway"
            },
            "description": "Array subnets allocated in this Network"
          },
          "routes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/route"
            },
            "description": "Array of routes set in this Network"
          },
          "servers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of IDs of Servers attached to this Network",
            "example": [
              42
            ]
          },
          "load_balancers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of IDs of Load Balancers attached to this Network",
            "example": [
              42
            ]
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Network from being deleted",
                "example": false
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Network"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Network was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00"
          }
        },
        "required": [
          "id",
          "name",
          "ip_range",
          "subnets",
          "routes",
          "servers",
          "protection",
          "labels",
          "created"
        ]
      },
      "power_off_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/poweroff"
      },
      "power_on_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/poweron"
      },
      "price": {
        "type": "object",
        "properties": {
          "net": {
            "type": "string",
            "description": "Price without VAT",
            "example": "1.0000000000",
            "format": "decimal"
          },
          "gross": {
            "type": "string",
            "description": "Price with VAT added",
            "example": "1.1900000000000000",
            "format": "decimal"
          }
        },
        "required": [
          "net",
          "gross"
        ],
        "description": "Hourly costs for a Resource in this Location | Monthly costs for a Resource in this Location | Hourly costs for a Server type in this Location | Monthly costs for a Server type in this Location | Hourly costs for a Load Balancer type in this network zone | Monthly costs for a Load Balancer type in this network zone"
      },
      "price_per_time": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "description": "Name of the Location the price is for",
            "example": "fsn1"
          },
          "price_hourly": {
            "$ref": "#/components/schemas/price"
          },
          "price_monthly": {
            "$ref": "#/components/schemas/price"
          }
        },
        "required": [
          "location",
          "price_hourly",
          "price_monthly"
        ]
      },
      "private_net_load_balancer": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "example": 4711
          },
          "ip": {
            "type": "string",
            "example": "10.0.0.2"
          }
        }
      },
      "private_net_server": {
        "type": "object",
        "properties": {
          "network": {
            "type": "integer",
            "example": 4711
          },
          "ip": {
            "type": "string",
            "example": "10.0.0.2"
          },
          "alias_ips": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mac_address": {
            "type": "string",
            "example": "86:00:ff:2a:7d:e1"
          }
        }
      },
      "protection": {
        "type": "object",
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "If true, prevents the Server from being deleted",
            "example": false
          },
          "rebuild": {
            "type": "boolean",
            "description": "If true, prevents the Server from being rebuilt",
            "example": false
          }
        },
        "required": [
          "delete",
          "rebuild"
        ],
        "description": "Protection configuration for the Server"
      },
      "public_net_load_balancer": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Public Interface enabled or not"
          },
          "ipv4": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "description": "IP address (v4) of this Load Balancer",
                "nullable": true,
                "example": "1.2.3.4"
              }
            },
            "description": "IP address (v4)"
          },
          "ipv6": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "description": "IP address (v6) of this Load Balancer",
                "nullable": true,
                "example": "2001:db8::1"
              }
            },
            "description": "IP address (v6)"
          }
        },
        "required": [
          "enabled",
          "ipv4",
          "ipv6"
        ],
        "description": "Public network information"
      },
      "public_net_server": {
        "type": "object",
        "properties": {
          "ipv4": {
            "$ref": "#/components/schemas/ipv4"
          },
          "ipv6": {
            "$ref": "#/components/schemas/ipv6"
          },
          "floating_ips": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of Floating IPs assigned to this Server",
            "example": [
              478
            ]
          }
        },
        "required": [
          "ipv4",
          "ipv6",
          "floating_ips"
        ],
        "description": "Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`"
      },
      "rebuild_server_from_image_request": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "ID or name of Image to rebuilt from.",
            "example": "ubuntu-20.04"
          }
        },
        "required": [
          "image"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/servers/{id}/actions/rebuild"
      },
      "rebuild_server_from_image_response": {
        "type": "object",
        "properties": {
          "root_password": {
            "type": "string",
            "description": "New root password when not using SSH keys",
            "nullable": true
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/rebuild"
      },
      "remove_target_request": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ip",
              "label_selector",
              "server"
            ],
            "description": "Type of the resource"
          },
          "server": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Server",
                "example": 80
              }
            },
            "required": [
              "id"
            ],
            "additionalProperties": false,
            "description": "Configuration for type Server, required if type is `server`"
          },
          "label_selector": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "Label selector",
                "example": "env=prod"
              }
            },
            "required": [
              "selector"
            ],
            "description": "Configuration for label selector targets, required if type is `label_selector`"
          },
          "ip": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "description": "IP of a server that belongs to the same customer (public IPv4/IPv6).",
                "example": "203.0.113.1"
              }
            },
            "required": [
              "ip"
            ],
            "description": "IP targets where the traffic should be routed through. Currently it is only possible to use the IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well."
          }
        },
        "required": [
          "type"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/remove_target"
      },
      "remove_target_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/remove_target"
      },
      "replace_certificate_request": {
        "title": "UpdateCertificate",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New Certificate name",
            "example": "my website cert"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/certificates/{id}"
      },
      "replace_certificate_response": {
        "title": "CertificateResponse",
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/certificate"
          }
        },
        "required": [
          "certificate"
        ],
        "description": "Response to PUT https://api.hetzner.cloud/v1/certificates/{id}"
      },
      "replace_floating_ip_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New unique name to set",
            "example": "Web Frontend"
          },
          "description": {
            "type": "string",
            "description": "New Description to set",
            "example": "Web Frontend"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/floating_ips/{id}"
      },
      "replace_floating_ip_response": {
        "type": "object",
        "properties": {
          "floating_ip": {
            "$ref": "#/components/schemas/floating_ip"
          }
        },
        "required": [
          "floating_ip"
        ],
        "description": "Response to PUT https://api.hetzner.cloud/v1/floating_ips/{id}"
      },
      "replace_image_request": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "New description of Image",
            "example": "My new Image description"
          },
          "type": {
            "type": "string",
            "enum": [
              "snapshot"
            ],
            "description": "Destination Image type to convert to"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/images/{id}"
      },
      "replace_image_response": {
        "type": "object",
        "properties": {
          "image": {
            "$ref": "#/components/schemas/image"
          }
        },
        "description": "Response to PUT https://api.hetzner.cloud/v1/images/{id}"
      },
      "replace_load_balancer_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New Load Balancer name",
            "example": "new-name"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/load_balancers/{id}"
      },
      "replace_load_balancer_response": {
        "type": "object",
        "properties": {
          "load_balancer": {
            "$ref": "#/components/schemas/load_balancer"
          }
        },
        "required": [
          "load_balancer"
        ],
        "description": "Response to PUT https://api.hetzner.cloud/v1/load_balancers/{id}"
      },
      "replace_network_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New network name",
            "example": "new-name"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/networks/{id}"
      },
      "replace_network_response": {
        "type": "object",
        "properties": {
          "network": {
            "$ref": "#/components/schemas/network"
          }
        },
        "description": "Response to PUT https://api.hetzner.cloud/v1/networks/{id}"
      },
      "replace_server_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name to set",
            "example": "my-server"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/servers/{id}"
      },
      "replace_server_response": {
        "type": "object",
        "properties": {
          "server": {
            "$ref": "#/components/schemas/server"
          }
        },
        "description": "Response to PUT https://api.hetzner.cloud/v1/servers/{id}"
      },
      "replace_ssh_key_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name Name to set",
            "example": "My ssh key"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "description": "Request for PUT https://api.hetzner.cloud/v1/ssh_keys/{id}"
      },
      "replace_ssh_key_response": {
        "type": "object",
        "properties": {
          "ssh_key": {
            "$ref": "#/components/schemas/ssh_key"
          }
        },
        "required": [
          "ssh_key"
        ],
        "description": "Response to PUT https://api.hetzner.cloud/v1/ssh_keys/{id}"
      },
      "replace_volume_request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New Volume name",
            "example": "database-storage"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          }
        },
        "required": [
          "name"
        ],
        "description": "Request for PUT https://api.hetzner.cloud/v1/volumes/{id}"
      },
      "replace_volume_response": {
        "type": "object",
        "properties": {
          "volume": {
            "$ref": "#/components/schemas/volume"
          }
        },
        "required": [
          "volume"
        ],
        "description": "Response to PUT https://api.hetzner.cloud/v1/volumes/{id}"
      },
      "request_console_for_server_response": {
        "type": "object",
        "properties": {
          "wss_url": {
            "type": "string",
            "description": "URL of websocket proxy to use; this includes a token which is valid for a limited time only",
            "example": "wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c"
          },
          "password": {
            "type": "string",
            "description": "VNC password to use for this connection (this password only works in combination with a wss_url with valid token)",
            "example": "9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "wss_url",
          "password",
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/request_console"
      },
      "reset_root_password_of_server_response": {
        "type": "object",
        "properties": {
          "root_password": {
            "type": "string",
            "description": "Password that will be set for this Server once the Action succeeds",
            "example": "zCWbFhnu950dUTko5f40"
          },
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reset_password"
      },
      "reset_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reset"
      },
      "resize_volume_request": {
        "type": "object",
        "properties": {
          "size": {
            "type": "number",
            "description": "New Volume size in GB (must be greater than current size)",
            "example": 50
          }
        },
        "required": [
          "size"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize"
      },
      "resize_volume_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/volumes/{id}/actions/resize"
      },
      "resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of resource referenced",
            "example": 42
          },
          "type": {
            "type": "string",
            "description": "Type of resource referenced",
            "example": "server"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "route": {
        "type": "object",
        "properties": {
          "destination": {
            "type": "string",
            "description": "Destination network or host of this route. Must not overlap with an existing ip_range in any subnets or with any destinations in other routes or with the first IP of the networks ip_range or with 172.31.1.1. Must be one of the private IPv4 ranges of RFC1918.",
            "example": "10.100.1.0/24"
          },
          "gateway": {
            "type": "string",
            "description": "Gateway for the route. Cannot be the first IP of the networks ip_range and also cannot be 172.31.1.1 as this IP is being used as a gateway for the public network interface of Servers. | Gateway for the route. Cannot be the first IP of the networks ip_range, an IP behind a vSwitch or 172.31.1.1, as this IP is being used as a gateway for the public network interface of Servers.",
            "example": "10.0.1.1"
          }
        },
        "required": [
          "destination",
          "gateway"
        ],
        "description": "Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/add_route | Request for POST https://api.hetzner.cloud/v1/networks/{id}/actions/delete_route"
      },
      "selected_target": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "server"
          },
          "label_selector": {
            "type": "string",
            "nullable": true
          },
          "server": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Server",
                "example": 80
              }
            },
            "required": [
              "id"
            ]
          },
          "health_status": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/health_status"
            }
          }
        }
      },
      "server": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of Server",
            "example": 42
          },
          "name": {
            "type": "string",
            "description": "Name of the Server (must be unique per Project and a valid hostname as per RFC 1123)",
            "example": "my-server"
          },
          "status": {
            "type": "string",
            "enum": [
              "deleting",
              "initializing",
              "migrating",
              "off",
              "rebuilding",
              "running",
              "starting",
              "stopping",
              "unknown"
            ],
            "description": "Status of the Server"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Server was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00"
          },
          "public_net": {
            "$ref": "#/components/schemas/public_net_server"
          },
          "private_net": {
            "type": "array",
            "description": "Private networks information",
            "items": {
              "$ref": "#/components/schemas/private_net_server"
            }
          },
          "server_type": {
            "$ref": "#/components/schemas/server_type"
          },
          "datacenter": {
            "$ref": "#/components/schemas/datacenter"
          },
          "image": {
            "$ref": "#/components/schemas/image"
          },
          "iso": {
            "$ref": "#/components/schemas/iso_optional"
          },
          "rescue_enabled": {
            "type": "boolean",
            "description": "True if rescue mode is enabled. Server will then boot into rescue system on next reboot",
            "example": false
          },
          "locked": {
            "type": "boolean",
            "description": "True if Server has been locked and is not available to user",
            "example": false
          },
          "backup_window": {
            "type": "string",
            "nullable": true,
            "description": "Time window (UTC) in which the backup will run, or null if the backups are not enabled",
            "example": "22-02"
          },
          "outgoing_traffic": {
            "type": "integer",
            "nullable": true,
            "description": "Outbound Traffic for the current billing period in bytes",
            "example": 123456,
            "format": "int64"
          },
          "ingoing_traffic": {
            "type": "integer",
            "nullable": true,
            "description": "Inbound Traffic for the current billing period in bytes",
            "example": 123456,
            "format": "int64"
          },
          "included_traffic": {
            "type": "integer",
            "nullable": true,
            "description": "Free Traffic for the current billing period in bytes",
            "example": 654321,
            "format": "int64"
          },
          "protection": {
            "$ref": "#/components/schemas/protection"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "volumes": {
            "type": "array",
            "description": "IDs of Volumes assigned to this Server",
            "items": {
              "type": "integer"
            }
          },
          "load_balancers": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "primary_disk_size": {
            "type": "integer",
            "description": "Size of the primary Disk",
            "example": 50
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "created",
          "public_net",
          "private_net",
          "server_type",
          "datacenter",
          "image",
          "iso",
          "rescue_enabled",
          "locked",
          "backup_window",
          "outgoing_traffic",
          "ingoing_traffic",
          "included_traffic",
          "protection",
          "labels",
          "primary_disk_size"
        ],
        "description": "Servers are virtual machines that can be provisioned."
      },
      "server_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Server type",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Unique identifier of the Server type",
            "example": "cx11"
          },
          "description": {
            "type": "string",
            "description": "Description of the Server type",
            "example": "CX11"
          },
          "cores": {
            "type": "integer",
            "description": "Number of cpu cores a Server of this type will have",
            "example": 1
          },
          "memory": {
            "type": "number",
            "description": "Memory a Server of this type will have in GB",
            "example": 1
          },
          "disk": {
            "type": "number",
            "description": "Disk size a Server of this type will have in GB",
            "example": 25
          },
          "deprecated": {
            "type": "boolean",
            "description": "True if Server type is deprecated",
            "example": false,
            "nullable": true
          },
          "prices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/price_per_time"
            },
            "description": "Prices in different Locations"
          },
          "storage_type": {
            "type": "string",
            "enum": [
              "local",
              "network"
            ],
            "description": "Type of Server boot drive. Local has higher speed. Network has better availability."
          },
          "cpu_type": {
            "type": "string",
            "enum": [
              "dedicated",
              "shared"
            ],
            "description": "Type of cpu"
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "cores",
          "memory",
          "disk",
          "deprecated",
          "prices",
          "storage_type",
          "cpu_type"
        ],
        "description": "Type of Server - determines how much ram, disk and cpu a Server has"
      },
      "service": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "tcp"
            ],
            "description": "Protocol of the Load Balancer",
            "example": "https"
          },
          "listen_port": {
            "type": "integer",
            "description": "Port the Load Balancer listens on",
            "example": 443
          },
          "destination_port": {
            "type": "integer",
            "description": "Port the Load Balancer will balance to",
            "example": 80
          },
          "proxyprotocol": {
            "type": "boolean",
            "description": "Is Proxyprotocol enabled or not",
            "example": false
          },
          "health_check": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "protocol": {
                    "type": "string",
                    "enum": [
                      "tcp",
                      "http"
                    ],
                    "description": "Type of the health check",
                    "example": "http"
                  },
                  "port": {
                    "type": "number",
                    "description": "Port the health check will be performed on",
                    "example": 4711
                  },
                  "interval": {
                    "type": "number",
                    "description": "Time interval in seconds health checks are performed",
                    "example": 15
                  },
                  "timeout": {
                    "type": "number",
                    "description": "Time in seconds after an attempt is considered a timeout",
                    "example": 10
                  },
                  "retries": {
                    "type": "number",
                    "description": "Unsuccessful retries needed until a target is considered unhealthy",
                    "example": 3
                  },
                  "http": {
                    "type": "object",
                    "properties": {
                      "domain": {
                        "type": "string",
                        "description": "Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.",
                        "nullable": true,
                        "example": "example.com"
                      },
                      "path": {
                        "type": "string",
                        "description": "HTTP path to use for health checks",
                        "example": "/"
                      },
                      "response": {
                        "type": "string",
                        "description": "String that must be contained in HTTP response in order to pass the health check",
                        "example": "{\"status\": \"ok\"}"
                      },
                      "status_codes": {
                        "type": "array",
                        "description": "List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones. The default is to pass the health check for any status code between 2?? and 3??.",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "2??",
                          "3??"
                        ]
                      },
                      "tls": {
                        "type": "boolean",
                        "description": "Use HTTPS for health check",
                        "example": false
                      }
                    },
                    "required": [
                      "domain",
                      "path"
                    ],
                    "additionalProperties": false,
                    "description": "Additional configuration for protocol http"
                  }
                },
                "required": [
                  "protocol",
                  "port",
                  "interval",
                  "timeout",
                  "retries"
                ],
                "additionalProperties": false
              },
              {
                "description": "Health check that belong to this service"
              }
            ]
          },
          "http": {
            "$ref": "#/components/schemas/http"
          }
        },
        "required": [
          "protocol",
          "listen_port",
          "destination_port",
          "proxyprotocol",
          "health_check"
        ],
        "description": "A service for a Load Balancer."
      },
      "shutdown_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/shutdown"
      },
      "soft_reboot_server_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/servers/{id}/actions/reboot"
      },
      "ssh_key": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the SSH key",
            "example": 2323
          },
          "name": {
            "type": "string",
            "description": "Name of the SSH key (must be unique per Project)",
            "example": "My ssh key"
          },
          "fingerprint": {
            "type": "string",
            "description": "Fingerprint of public key",
            "example": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f"
          },
          "public_key": {
            "type": "string",
            "description": "Public key",
            "example": "ssh-rsa AAAjjk76kgf...Xt"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "created": {
            "type": "string",
            "description": "Point in time when the SSH key was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:00+00:00"
          }
        },
        "required": [
          "id",
          "name",
          "fingerprint",
          "public_key",
          "labels",
          "created"
        ],
        "description": "SSH keys are public keys you provide to the cloud system. They can be injected into Servers at creation time. We highly recommend that you use keys instead of passwords to manage your Servers."
      },
      "subnet": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cloud",
              "server",
              "vswitch"
            ],
            "description": "Type of Subnetwork"
          },
          "ip_range": {
            "type": "string",
            "description": "Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. If the Subnet is of type vSwitch, it also can not overlap with any gateway in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.",
            "example": "10.0.1.0/24"
          },
          "network_zone": {
            "type": "string",
            "description": "Name of Network zone. Currently eu-central is the only available zone.",
            "example": "eu-central"
          },
          "vswitch_id": {
            "type": "integer",
            "description": "ID of the robot vSwitch. Must be supplied if the subnet is of type vswitch.",
            "example": 1000
          }
        },
        "required": [
          "type",
          "network_zone"
        ],
        "description": "Subnets divide the ip_range from the parent Network object into multiple Subnetworks that you can use for different specific purposes."
      },
      "subnet_with_gateway": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cloud",
              "server",
              "vswitch"
            ],
            "description": "Type of Subnetwork"
          },
          "ip_range": {
            "type": "string",
            "description": "Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.",
            "example": "10.0.1.0/24"
          },
          "network_zone": {
            "type": "string",
            "description": "Name of Network zone. Currently eu-central is the only available zone.",
            "example": "eu-central"
          },
          "gateway": {
            "type": "string",
            "description": "Gateway for Servers attached to this subnet. For subnets of type Server this is always the first IP of the network IP range.",
            "example": "10.0.0.1"
          }
        },
        "required": [
          "type",
          "network_zone",
          "gateway"
        ]
      },
      "target": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ip",
              "label_selector",
              "server"
            ],
            "description": "Type of the resource"
          },
          "server": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "ID of the Server",
                "example": 80
              }
            },
            "required": [
              "id"
            ],
            "description": "Server where the traffic should be routed through"
          },
          "health_status": {
            "type": "array",
            "description": "List of health statuses of the services on this target",
            "items": {
              "$ref": "#/components/schemas/health_status"
            }
          },
          "use_private_ip": {
            "type": "boolean",
            "description": "Use the private network IP instead of the public IP. Default value is false."
          },
          "label_selector": {
            "type": "object",
            "properties": {
              "selector": {
                "type": "string",
                "description": "Label selector",
                "example": "env=prod"
              }
            },
            "required": [
              "selector"
            ],
            "description": "Label selector and a list of selected targets"
          },
          "ip": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "description": "IP of a server that belongs to the same customer (public IPv4/IPv6).",
                "example": "203.0.113.1"
              }
            },
            "required": [
              "ip"
            ],
            "description": "IP targets where the traffic should be routed through. Currently it is only possible to use the IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well."
          },
          "targets": {
            "type": "array",
            "description": "List of selected targets",
            "items": {
              "$ref": "#/components/schemas/selected_target"
            }
          }
        },
        "required": [
          "type"
        ],
        "description": "A target for a load balancer"
      },
      "unassign_floating_ip_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/floating_ips/{id}/actions/unassign"
      },
      "update_service_request": {
        "$ref": "#/components/schemas/service"
      },
      "update_service_response": {
        "type": "object",
        "title": "ActionResponse",
        "properties": {
          "action": {
            "$ref": "#/components/schemas/action"
          }
        },
        "required": [
          "action"
        ],
        "description": "Response to POST https://api.hetzner.cloud/v1/load_balancers/{id}/actions/update_service"
      },
      "volume": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the Volume",
            "example": 4711
          },
          "created": {
            "type": "string",
            "description": "Point in time when the Volume was created (in ISO-8601 format)",
            "example": "2016-01-30T23:50:11+00:00"
          },
          "name": {
            "type": "string",
            "description": "Name of the Volume",
            "example": "database-storage"
          },
          "server": {
            "type": "integer",
            "description": "ID of the Server the Volume is attached to, null if it is not attached at all",
            "nullable": true,
            "example": 12
          },
          "location": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "description": "ID of the Location",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "description": "Unique identifier of the Location",
                    "example": "fsn1"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the Location",
                    "example": "Falkenstein DC Park 1"
                  },
                  "country": {
                    "type": "string",
                    "description": "ISO 3166-1 alpha-2 code of the country the Location resides in",
                    "example": "DE"
                  },
                  "city": {
                    "type": "string",
                    "description": "City the Location is closest to",
                    "example": "Falkenstein"
                  },
                  "latitude": {
                    "type": "number",
                    "description": "Latitude of the city closest to the Location",
                    "example": 50.47612
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Longitude of the city closest to the Location",
                    "example": 12.370071
                  },
                  "network_zone": {
                    "type": "string",
                    "description": "Name of network zone this Location resides in",
                    "example": "eu-central"
                  }
                },
                "required": [
                  "id",
                  "name",
                  "description",
                  "country",
                  "city",
                  "latitude",
                  "longitude",
                  "network_zone"
                ]
              },
              {
                "description": "Location of the Volume. Volume can only be attached to Servers in the same Location."
              }
            ]
          },
          "size": {
            "type": "number",
            "description": "Size in GB of the Volume",
            "example": 42
          },
          "linux_device": {
            "type": "string",
            "description": "Device path on the file system for the Volume",
            "example": "/dev/disk/by-id/scsi-0HC_Volume_4711"
          },
          "protection": {
            "type": "object",
            "properties": {
              "delete": {
                "type": "boolean",
                "description": "If true, prevents the Volume from being deleted",
                "example": false
              }
            },
            "required": [
              "delete"
            ],
            "description": "Protection configuration for the Volume"
          },
          "labels": {
            "$ref": "#/components/schemas/labels"
          },
          "status": {
            "type": "string",
            "enum": [
              "available",
              "creating"
            ],
            "description": "Current status of the Volume",
            "example": "available"
          },
          "format": {
            "type": "string",
            "description": "Filesystem of the Volume if formatted on creation, null if not formatted on creation",
            "nullable": true,
            "example": "xfs"
          }
        },
        "required": [
          "id",
          "created",
          "name",
          "server",
          "location",
          "size",
          "linux_device",
          "protection",
          "labels",
          "status",
          "format"
        ],
        "description": "A Volume is a highly-available, scalable, and SSD-based block storage for Servers. Pricing for Volumes depends on the Volume size and Location, not the actual used storage. Please see [Hetzner Wiki](https://wiki.hetzner.de/index.php/CloudServer/en#Volumes) for more details about Volumes."
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "paths": {
    "/actions": {
      "get": {
        "summary": "Get all Actions",
        "description": "Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified IDs",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_response"
                }
              }
            }
          }
        },
        "operationId": "list_actions"
      }
    },
    "/actions/{id}": {
      "get": {
        "summary": "Get an Action",
        "description": "Returns a specific Action object.",
        "tags": [
          "actions"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Resource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key in the reply has this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_action_response"
                }
              }
            }
          }
        },
        "operationId": "get_action"
      }
    },
    "/certificates": {
      "get": {
        "summary": "Get all Certificates",
        "description": "Returns all Certificate objects.",
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter resources by their name. The response will only contain the resources matching the specified name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter resources by labels. The response will only contain resources matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `certificates` key contains an array of Certificate objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_certificates_response"
                }
              }
            }
          }
        },
        "operationId": "list_certificates"
      },
      "post": {
        "summary": "Create a Certificate",
        "description": "Creates a new Certificate.",
        "tags": [
          "certificates"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_certificate_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `certificate` key contains the Certificate that was just created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_certificate_response"
                }
              }
            }
          }
        },
        "operationId": "create_certificate"
      }
    },
    "/certificates/{id}": {
      "get": {
        "summary": "Get a Certificate",
        "description": "Gets a specific Certificate object.",
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `certificate` key contains a Certificate object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_certificate_response"
                }
              }
            }
          }
        },
        "operationId": "get_certificate"
      },
      "put": {
        "summary": "Update a Certificate",
        "description": "Updates the Certificate properties.\n\nNote that when updating labels, the Certificate’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n\nNote: if the Certificate object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_certificate_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `certificate` key contains the Certificate that was just updated",
            "content": {
              "application/json": {
                "example": {
                  "certificate": {
                    "id": 897,
                    "name": "my website cert",
                    "labels": {
                      "labelkey": "value"
                    },
                    "certificate": "-----BEGIN CERTIFICATE-----\n...",
                    "created": "2019-01-08T12:10:00+00:00",
                    "not_valid_before": "2019-01-08T10:00:00+00:00",
                    "not_valid_after": "2019-07-08T09:59:59+00:00",
                    "domain_names": [
                      "example.com",
                      "webmail.example.com",
                      "www.example.com"
                    ],
                    "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                    "used_by": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ]
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_certificate_response"
                }
              }
            }
          }
        },
        "operationId": "replace_certificate"
      },
      "delete": {
        "summary": "Delete a Certificate",
        "description": "Deletes a Certificate.",
        "tags": [
          "certificates"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the resource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Certificate deleted"
          }
        },
        "operationId": "delete_certificate"
      }
    },
    "/datacenters": {
      "get": {
        "summary": "Get all Datacenters",
        "description": "Returns all Datacenter objects.",
        "tags": [
          "datacenters"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Datacenters by their name. The response will only contain the Datacenter matching the specified name. When the name does not match the Datacenter name format, an `invalid_input` error is returned.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The reply contains the `datacenters` and `recommendation` keys",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_datacenters_response"
                }
              }
            }
          }
        },
        "operationId": "list_datacenters"
      }
    },
    "/datacenters/{id}": {
      "get": {
        "summary": "Get a Datacenter",
        "description": "Returns a specific Datacenter object.",
        "tags": [
          "datacenters"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Datacenter",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `datacenter` key in the reply contains a Datacenter object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_datacenter_response"
                }
              }
            }
          }
        },
        "operationId": "get_datacenter"
      }
    },
    "/floating_ips": {
      "get": {
        "summary": "Get all Floating IPs",
        "description": "Returns all Floating IP objects.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Floating IPs by their name. The response will only contain the Floating IP matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter Floating IPs by labels. The response will only contain Floating IPs matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times. Choices id id:asc id:desc created created:asc created:desc",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "created",
                "created:asc",
                "created:desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `floating_ips` key in the reply contains an array of Floating IP objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_floating_ips_response"
                }
              }
            }
          }
        },
        "operationId": "list_floating_ips"
      },
      "post": {
        "summary": "Create a Floating IP",
        "description": "Creates a new Floating IP assigned to a Server. If you want to create a Floating IP that is not bound to a Server, you need to provide the `home_location` key instead of `server`. This can be either the ID or the name of the Location this IP shall be created in. Note that a Floating IP can be assigned to a Server in any Location later on. For optimal routing it is advised to use the Floating IP in the same Location it was created in.",
        "tags": [
          "floating_ips"
        ],
        "requestBody": {
          "description": "The `type` argument is required while `home_location` and `server` are mutually exclusive.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_floating_ip_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `floating_ip` key in the reply contains the object that was just created",
            "content": {
              "application/json": {
                "example": {
                  "floating_ip": {
                    "id": 4711,
                    "name": "Web Frontend",
                    "description": "Web Frontend",
                    "ip": "131.232.99.1",
                    "type": "ipv4",
                    "server": 42,
                    "dns_ptr": [
                      {
                        "ip": "2001:db8::1",
                        "dns_ptr": "server.example.com"
                      }
                    ],
                    "home_location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "blocked": false,
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00"
                  },
                  "action": {
                    "id": 13,
                    "command": "create_floating_ip",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_floating_ip_response"
                }
              }
            }
          }
        },
        "operationId": "create_floating_ip"
      }
    },
    "/floating_ips/{id}": {
      "get": {
        "summary": "Get a Floating IP",
        "description": "Returns a specific Floating IP object.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `floating_ip` key in the reply contains a Floating IP object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_floating_ip_response"
                }
              }
            }
          }
        },
        "operationId": "get_floating_ip"
      },
      "put": {
        "summary": "Update a Floating IP",
        "description": "Updates the description or labels of a Floating IP.\nAlso note that when updating labels, the Floating IP’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_floating_ip_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `floating_ip` key in the reply contains the modified Floating IP object with the new description",
            "content": {
              "application/json": {
                "example": {
                  "floating_ip": {
                    "id": 4711,
                    "name": "Web Frontend",
                    "description": "Web Frontend",
                    "ip": "131.232.99.1",
                    "type": "ipv4",
                    "server": 42,
                    "dns_ptr": [
                      {
                        "ip": "2001:db8::1",
                        "dns_ptr": "server.example.com"
                      }
                    ],
                    "home_location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "blocked": false,
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_floating_ip_response"
                }
              }
            }
          }
        },
        "operationId": "replace_floating_ip"
      },
      "delete": {
        "summary": "Delete a Floating IP",
        "description": "Deletes a Floating IP. If it is currently assigned to a Server it will automatically get unassigned.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Floating IP deleted"
          }
        },
        "operationId": "delete_floating_ip"
      }
    },
    "/floating_ips/{id}/actions": {
      "get": {
        "summary": "Get all Actions for a Floating IP",
        "description": "Returns all Action objects for a Floating IP. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_floating_ip_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "assign_floating_ip",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 4711,
                          "type": "server"
                        },
                        {
                          "id": 4712,
                          "type": "floating_ip"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "list_actions_for_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/{action_id}": {
      "get": {
        "summary": "Get an Action for a Floating IP",
        "description": "Returns a specific Action object for a Floating IP.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key in the reply has this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "assign_floating_ip",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_floating_ip_response"
                }
              }
            }
          }
        },
        "operationId": "get_action_for_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/assign": {
      "post": {
        "summary": "Assign a Floating IP to a Server",
        "description": "Assigns a Floating IP to a Server.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assign_floating_ip_to_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `assign` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "assign_floating_ip",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/assign_floating_ip_to_server_response"
                }
              }
            }
          }
        },
        "operationId": "assign_floating_ip_to_server"
      }
    },
    "/floating_ips/{id}/actions/unassign": {
      "post": {
        "summary": "Unassign a Floating IP",
        "description": "Unassigns a Floating IP, resulting in it being unreachable. You may assign it to a Server again at a later time.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key contains the `unassign` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "unassign_floating_ip",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/unassign_floating_ip_response"
                }
              }
            }
          }
        },
        "operationId": "unassign_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/change_dns_ptr": {
      "post": {
        "summary": "Change reverse DNS entry for a Floating IP",
        "description": "Changes the hostname that will appear when getting the hostname belonging to this Floating IP.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Select the IP address for which to change the DNS entry by passing `ip`. For a Floating IP of type `ipv4` this must exactly match the IP address of the Floating IP. For a Floating IP of type `ipv6` this must be a single IP within the IPv6 /64 range that belongs to this Floating IP.\n\nThe target hostname is set by passing `dns_ptr`.\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_entry_for_floating_ip_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_dns_ptr` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_dns_ptr",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_entry_for_floating_ip_response"
                }
              }
            }
          }
        },
        "operationId": "change_reverse_dns_entry_for_floating_ip"
      }
    },
    "/floating_ips/{id}/actions/change_protection": {
      "post": {
        "summary": "Change Floating IP Protection",
        "description": "Changes the protection configuration of the Floating IP.",
        "tags": [
          "floating_ips"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Floating IP",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_floating_ip_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_protection` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "floating_ip"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_floating_ip_protection_response"
                }
              }
            }
          }
        },
        "operationId": "change_floating_ip_protection"
      }
    },
    "/images": {
      "get": {
        "summary": "Get all Images",
        "description": "Returns all Image objects. You can select specific Image types only and sort the results by using URI parameters.",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "system",
                "snapshot",
                "backup"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times. The response will only contain Images matching the status.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "creating"
              ]
            }
          },
          {
            "name": "bound_to",
            "in": "query",
            "description": "Can be used multiple times. Server ID linked to the Image. Only available for Images of type `backup`",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_deprecated",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter resources by their name. The response will only contain the resources matching the specified name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter resources by labels. The response will only contain resources matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `images` key in the reply contains an array of Image objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_images_response"
                }
              }
            }
          }
        },
        "operationId": "list_images"
      }
    },
    "/images/{id}": {
      "get": {
        "summary": "Get an Image",
        "description": "Returns a specific Image object.",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `image` key in the reply contains an Image object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_image_response"
                }
              }
            }
          }
        },
        "operationId": "get_image"
      },
      "put": {
        "summary": "Update an Image",
        "description": "Updates the Image. You may change the description, convert a Backup Image to a Snapshot Image or change the Image labels. Only Images of type `snapshot` and `backup` can be updated.\n\nNote that when updating labels, the current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_image_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The image key in the reply contains the modified Image object",
            "content": {
              "application/json": {
                "example": {
                  "image": {
                    "id": 4711,
                    "type": "snapshot",
                    "status": "available",
                    "name": null,
                    "description": "My new Image description",
                    "image_size": 2.3,
                    "disk_size": 10,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "bound_to": null,
                    "os_flavor": "ubuntu",
                    "os_version": "20.04",
                    "rapid_deploy": false,
                    "protection": {
                      "delete": false
                    },
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "labels": {
                      "labelkey": "value"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_image_response"
                }
              }
            }
          }
        },
        "operationId": "replace_image"
      },
      "delete": {
        "summary": "Delete an Image",
        "description": "Deletes an Image. Only Images of type `snapshot` and `backup` can be deleted.",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Image deleted"
          }
        },
        "operationId": "delete_image"
      }
    },
    "/images/{id}/actions": {
      "get": {
        "summary": "Get all Actions for an Image",
        "description": "Returns all Action objects for an Image. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_image_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "change_protection",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 4711,
                          "type": "image"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "list_actions_for_image"
      }
    },
    "/images/{id}/actions/{action_id}": {
      "get": {
        "summary": "Get an Action for an Image",
        "description": "Returns a specific Action for an Image.",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key contains the Image Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "image"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_image_response"
                }
              }
            }
          }
        },
        "operationId": "get_action_for_image"
      }
    },
    "/images/{id}/actions/change_protection": {
      "post": {
        "summary": "Change Image Protection",
        "description": "Changes the protection configuration of the Image. Can only be used on snapshots.",
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Image",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_image_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_protection` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "image"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_image_protection_response"
                }
              }
            }
          }
        },
        "operationId": "change_image_protection"
      }
    },
    "/isos": {
      "get": {
        "summary": "Get all ISOs",
        "description": "Returns all available ISO objects.",
        "tags": [
          "isos"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter ISOs by their name. The response will only contain the ISO matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `isos` key in the reply contains an array of iso objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_isos_response"
                }
              }
            }
          }
        },
        "operationId": "list_isos"
      }
    },
    "/isos/{id}": {
      "get": {
        "summary": "Get an ISO",
        "description": "Returns a specific ISO object.",
        "tags": [
          "isos"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the ISO",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `iso` key in the reply contains an array of ISO objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_iso_response"
                }
              }
            }
          }
        },
        "operationId": "get_iso"
      }
    },
    "/load_balancers": {
      "get": {
        "summary": "Get all Load Balancers",
        "description": "Gets all existing Load Balancers that you have available.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter resources by their name. The response will only contain the resources matching the specified name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter resources by labels. The response will only contain resources matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `load_balancers` key contains a list of Load Balancers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_load_balancers_response"
                }
              }
            }
          }
        },
        "operationId": "list_load_balancers"
      },
      "post": {
        "summary": "Create a Load Balancer",
        "description": "Creates a Load Balancer.\n\n#### Call specific error codes\n\n| Code                                    | Description                                                                                           |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------|\n| `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |\n| `ip_not_owned`                          | The IP is not owned by the owner of the project of the Load Balancer                                  |\n| `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |\n| `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |\n| `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |\n| `source_port_already_used`              | The source port you are trying to add is already in use                                               |\n| `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |\n",
        "tags": [
          "load_balancers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_load_balancer_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `load_balancer` key contains the Load Balancer that was just created",
            "content": {
              "application/json": {
                "example": {
                  "load_balancer": {
                    "id": 4711,
                    "name": "Web Frontend",
                    "public_net": {
                      "enabled": false,
                      "ipv4": {
                        "ip": "1.2.3.4"
                      },
                      "ipv6": {
                        "ip": "2001:db8::1"
                      }
                    },
                    "private_net": [
                      {
                        "network": 4711,
                        "ip": "10.0.0.2"
                      }
                    ],
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "load_balancer_type": {
                      "id": 1,
                      "name": "lb11",
                      "description": "LB11",
                      "max_connections": 20000,
                      "max_services": 5,
                      "max_targets": 25,
                      "max_assigned_certificates": 10,
                      "deprecated": "2016-01-30T23:50:00+00:00",
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ]
                    },
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "created": "2016-01-30T23:50:00+00:00",
                    "services": [
                      {
                        "protocol": "http",
                        "listen_port": 443,
                        "destination_port": 80,
                        "proxyprotocol": false,
                        "health_check": {
                          "protocol": "http",
                          "port": 4711,
                          "interval": 15,
                          "timeout": 10,
                          "retries": 3,
                          "http": {
                            "domain": "example.com",
                            "path": "/",
                            "response": "{\"status\": \"ok\"}",
                            "status_codes": [
                              "2??,3??"
                            ],
                            "tls": false
                          }
                        },
                        "http": {
                          "cookie_name": "HCLBSTICKY",
                          "cookie_lifetime": 300,
                          "certificates": [
                            897
                          ],
                          "redirect_http": true,
                          "sticky_sessions": true
                        }
                      }
                    ],
                    "targets": [
                      {
                        "type": "server",
                        "server": {
                          "id": 80
                        },
                        "health_status": [
                          {
                            "listen_port": 443,
                            "status": "healthy"
                          }
                        ],
                        "use_private_ip": true,
                        "targets": [
                          {
                            "type": "server",
                            "label_selector": null,
                            "server": {
                              "id": 80
                            },
                            "health_status": [
                              {
                                "listen_port": 443,
                                "status": "healthy"
                              }
                            ],
                            "use_private_ip": true
                          }
                        ]
                      }
                    ],
                    "algorithm": {
                      "type": "round_robin"
                    },
                    "outgoing_traffic": 123456,
                    "ingoing_traffic": 123456,
                    "included_traffic": 654321
                  },
                  "action": {
                    "id": 13,
                    "command": "create_load_balancer",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "create_load_balancer"
      }
    },
    "/load_balancers/{id}": {
      "get": {
        "summary": "Get a Load Balancer",
        "description": "Gets a specific Load Balancer object.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `load_balancer` key contains the Load Balancer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "get_load_balancer"
      },
      "put": {
        "summary": "Update a Load Balancer",
        "description": "Updates a Load Balancer. You can update a Load Balancer’s name and a Load Balancer’s labels.\n\nNote that when updating labels, the Load Balancer’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n\nNote: if the Load Balancer object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_load_balancer_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `load_balancer` key contains the updated Load Balancer",
            "content": {
              "application/json": {
                "example": {
                  "load_balancer": {
                    "id": 4711,
                    "name": "new-name",
                    "public_net": {
                      "enabled": false,
                      "ipv4": {
                        "ip": "1.2.3.4"
                      },
                      "ipv6": {
                        "ip": "2001:db8::1"
                      }
                    },
                    "private_net": [
                      {
                        "network": 4711,
                        "ip": "10.0.0.2"
                      }
                    ],
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "load_balancer_type": {
                      "id": 1,
                      "name": "lb11",
                      "description": "LB11",
                      "max_connections": 20000,
                      "max_services": 5,
                      "max_targets": 25,
                      "max_assigned_certificates": 10,
                      "deprecated": "2016-01-30T23:50:00+00:00",
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ]
                    },
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00",
                    "services": [
                      {
                        "protocol": "http",
                        "listen_port": 443,
                        "destination_port": 80,
                        "proxyprotocol": false,
                        "health_check": {
                          "protocol": "http",
                          "port": 4711,
                          "interval": 15,
                          "timeout": 10,
                          "retries": 3,
                          "http": {
                            "domain": "example.com",
                            "path": "/",
                            "response": "{\"status\": \"ok\"}",
                            "status_codes": [
                              "2??,3??"
                            ],
                            "tls": false
                          }
                        },
                        "http": {
                          "cookie_name": "HCLBSTICKY",
                          "cookie_lifetime": 300,
                          "certificates": [
                            897
                          ],
                          "redirect_http": true,
                          "sticky_sessions": true
                        }
                      }
                    ],
                    "targets": [
                      {
                        "type": "server",
                        "server": {
                          "id": 80
                        },
                        "health_status": [
                          {
                            "listen_port": 443,
                            "status": "healthy"
                          }
                        ],
                        "use_private_ip": true,
                        "label_selector": {
                          "selector": "env=prod"
                        },
                        "ip": {
                          "ip": "203.0.113.1"
                        },
                        "targets": [
                          {
                            "type": "server",
                            "label_selector": null,
                            "server": {
                              "id": 80
                            },
                            "health_status": [
                              {
                                "listen_port": 443,
                                "status": "healthy"
                              }
                            ],
                            "use_private_ip": true
                          }
                        ]
                      }
                    ],
                    "algorithm": {
                      "type": "round_robin"
                    },
                    "outgoing_traffic": 123456,
                    "ingoing_traffic": 123456,
                    "included_traffic": 654321
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "replace_load_balancer"
      },
      "delete": {
        "summary": "Delete a Load Balancer",
        "description": "Deletes a Load Balancer.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Load Balancer deleted"
          }
        },
        "operationId": "delete_load_balancer"
      }
    },
    "/load_balancers/{id}/metrics": {
      "get": {
        "summary": "Get Metrics for a LoadBalancer",
        "description": "You must specify the type of metric to get: `open_connections`, `connections_per_second`, `requests_per_second` or `bandwidth`. You can also specify more than one type by comma separation, e.g. `requests_per_second,bandwidth`.\n\nDepending on the type you will get different time series data:\n\n|Type | Timeseries | Unit | Description |\n|---- |------------|------|-------------|\n| open_connections | open_connections | number | Open connections |\n| connections_per_second | connections_per_second | connections/s | Connections per second |\n| requests_per_second | requests_per_second | requests/s | Requests per second |\n| bandwidth | bandwidth.in | bytes/s | Ingress bandwidth |\n|| bandwidth.out | bytes/s | Egress bandwidth |\n\nMetrics are available for the last 30 days only.\n\nIf you do not provide the step argument we will automatically adjust it so that 200 samples are returned.\n\nWe limit the number of samples to a maximum of 500 and will adjust the step parameter accordingly.\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of metrics to get",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "open_connections",
                "connections_per_second",
                "requests_per_second",
                "bandwidth"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start of period to get Metrics for (in ISO-8601 format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End of period to get Metrics for (in ISO-8601 format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step",
            "in": "query",
            "description": "Resolution of results in seconds",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `metrics` key in the reply contains a metrics object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_metrics_for_loadbalancer_response"
                }
              }
            }
          }
        },
        "operationId": "get_metrics_for_loadbalancer"
      }
    },
    "/load_balancers/{id}/actions": {
      "get": {
        "summary": "Get all Actions for a Load Balancer",
        "description": "Returns all Action objects for a Load Balancer. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_load_balancer_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "add_service",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 4711,
                          "type": "load_balancer"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "list_actions_for_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/{action_id}": {
      "get": {
        "summary": "Get an Action for a Load Balancer",
        "description": "Returns a specific Action for a Load Balancer.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key contains the Load Balancer Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "get_action_for_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/add_service": {
      "post": {
        "summary": "Add Service",
        "description": "Adds a service to a Load Balancer.\n\n#### Call specific error codes\n\n| Code                       | Description                                             |\n|----------------------------|---------------------------------------------------------|\n| `source_port_already_used` | The source port you are trying to add is already in use |\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_service_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `add_service` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_service",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_service_response"
                }
              }
            }
          }
        },
        "operationId": "add_service"
      }
    },
    "/load_balancers/{id}/actions/update_service": {
      "post": {
        "summary": "Update Service",
        "description": "Updates a Load Balancer Service.\n\n#### Call specific error codes\n\n| Code                       | Description                                             |\n|----------------------------|---------------------------------------------------------|\n| `source_port_already_used` | The source port you are trying to add is already in use |\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_service_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `update_service` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "update_service",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/update_service_response"
                }
              }
            }
          }
        },
        "operationId": "update_service"
      }
    },
    "/load_balancers/{id}/actions/delete_service": {
      "post": {
        "summary": "Delete Service",
        "description": "Delete a service of a Load Balancer.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_service_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `delete_service` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "delete_service",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/delete_service_response"
                }
              }
            }
          }
        },
        "operationId": "delete_service"
      }
    },
    "/load_balancers/{id}/actions/add_target": {
      "post": {
        "summary": "Add Target",
        "description": "Adds a target to a Load Balancer.\n\n#### Call specific error codes\n\n| Code                                    | Description                                                                                           |\n|-----------------------------------------|-------------------------------------------------------------------------------------------------------|\n| `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |\n| `ip_not_owned`                          | The IP you are trying to add as a target is not owned by the Project owner                            |\n| `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |\n| `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |\n| `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |\n| `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_target_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `add_target` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_target",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_target_response"
                }
              }
            }
          }
        },
        "operationId": "add_target"
      }
    },
    "/load_balancers/{id}/actions/remove_target": {
      "post": {
        "summary": "Remove Target",
        "description": "Removes a target from a Load Balancer.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remove_target_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `remove_target` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "remove_target",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/remove_target_response"
                }
              }
            }
          }
        },
        "operationId": "remove_target"
      }
    },
    "/load_balancers/{id}/actions/change_algorithm": {
      "post": {
        "summary": "Change Algorithm",
        "description": "Change the algorithm that determines to which target new requests are sent.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_algorithm_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_algorithm` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_algorithm",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_algorithm_response"
                }
              }
            }
          }
        },
        "operationId": "change_algorithm"
      }
    },
    "/load_balancers/{id}/actions/change_type": {
      "post": {
        "summary": "Change the Type of a Load Balancer",
        "description": "Changes the type (Max Services, Max Targets and Max Connections) of a Load Balancer.\n\n**Call specific error codes**\n\n| Code                         | Description                                                     |\n|------------------------------|-----------------------------------------------------------------|\n| `invalid_load_balancer_type` | The Load Balancer type does not fit for the given Load Balancer |\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_type_of_load_balancer_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_load_balancer_type` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_load_balancer_type",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_type_of_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "change_type_of_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/attach_to_network": {
      "post": {
        "summary": "Attach a Load Balancer to a Network",
        "description": "Attach a Load Balancer to a Network.\n\n**Call specific error codes**\n\n| Code                             | Description                                                           |\n|----------------------------------|-----------------------------------------------------------------------|\n| `load_balancer_already_attached` | The Load Balancer is already attached to a network                    |\n| `ip_not_available`               | The provided Network IP is not available                              |\n| `no_subnet_available`            | No Subnet or IP is available for the Load Balancer within the network |\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_load_balancer_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `attach_to_network` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_to_network",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_load_balancer_to_network_response"
                }
              }
            }
          }
        },
        "operationId": "attach_load_balancer_to_network"
      }
    },
    "/load_balancers/{id}/actions/detach_from_network": {
      "post": {
        "summary": "Detach a Load Balancer from a Network",
        "description": "Detaches a Load Balancer from a network.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detach_load_balancer_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `detach_from_network` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_from_network",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_load_balancer_from_network_response"
                }
              }
            }
          }
        },
        "operationId": "detach_load_balancer_from_network"
      }
    },
    "/load_balancers/{id}/actions/enable_public_interface": {
      "post": {
        "summary": "Enable the public interface of a Load Balancer",
        "description": "Enable the public interface of a Load Balancer. The Load Balancer will be accessible from the internet via its public IPs.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key contains the `enable_public_interface` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "enable_public_interface",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/enable_public_interface_of_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "enable_public_interface_of_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/disable_public_interface": {
      "post": {
        "summary": "Disable the public interface of a Load Balancer",
        "description": "Disable the public interface of a Load Balancer. The Load Balancer will be not accessible from the internet via its public IPs.\n\n#### Call specific error codes\n\n| Code                                      | Description                                                                    |\n|-------------------------------------------|--------------------------------------------------------------------------------|\n| `load_balancer_not_attached_to_network`   |  The Load Balancer is not attached to a network                                |\n| `targets_without_use_private_ip`          | The Load Balancer has targets that use the public IP instead of the private IP |\n",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key contains the `disable_public_interface` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "disable_public_interface",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/disable_public_interface_of_load_balancer_response"
                }
              }
            }
          }
        },
        "operationId": "disable_public_interface_of_load_balancer"
      }
    },
    "/load_balancers/{id}/actions/change_protection": {
      "post": {
        "summary": "Change Load Balancer Protection",
        "description": "Changes the protection configuration of a Load Balancer.",
        "tags": [
          "load_balancers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Load Balancer",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_load_balancer_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_protection` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "load_balancer"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_load_balancer_protection_response"
                }
              }
            }
          }
        },
        "operationId": "change_load_balancer_protection"
      }
    },
    "/load_balancer_types": {
      "get": {
        "summary": "Get all Load Balancer Types",
        "description": "Gets all Load Balancer type objects.",
        "tags": [
          "load_balancer_types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Load Balancer types by their name. The response will only contain the Load Balancer type matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `load_balancer_types` key in the reply contains an array of Load Balancer type objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_load_balancer_types_response"
                }
              }
            }
          }
        },
        "operationId": "list_load_balancer_types"
      }
    },
    "/load_balancer_types/{id}": {
      "get": {
        "summary": "Get a Load Balancer Type",
        "description": "Gets a specific Load Balancer type object.",
        "tags": [
          "load_balancer_types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Load Balancer type",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `load_balancer_type` key in the reply contains a Load Balancer type object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_load_balancer_type_response"
                }
              }
            }
          }
        },
        "operationId": "get_load_balancer_type"
      }
    },
    "/locations": {
      "get": {
        "summary": "Get all Locations",
        "description": "Returns all Location objects.",
        "tags": [
          "locations"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Locations by their name. The response will only contain the Location matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `locations` key in the reply contains an array of Location objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_locations_response"
                }
              }
            }
          }
        },
        "operationId": "list_locations"
      }
    },
    "/locations/{id}": {
      "get": {
        "summary": "Get a Location",
        "description": "Returns a specific Location object.",
        "tags": [
          "locations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Location",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `location` key in the reply contains a Location object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_location_response"
                }
              }
            }
          }
        },
        "operationId": "get_location"
      }
    },
    "/networks": {
      "get": {
        "summary": "Get all Networks",
        "description": "Gets all existing networks that you have available.",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter networks by their name. The response will only contain the networks matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter networks by labels. The response will only contain networks with a matching label selector pattern.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `networks` key contains a list of networks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_networks_response"
                }
              }
            }
          }
        },
        "operationId": "list_networks"
      },
      "post": {
        "summary": "Create a Network",
        "description": "Creates a network with the specified `ip_range`.\n\nYou may specify one or more `subnets`. You can also add more Subnets later by using the [add subnet action](https://docs.hetzner.cloud/#network-actions-add-a-subnet-to-a-network). If you do not specify an `ip_range` in the subnet we will automatically pick the first available /24 range for you.\n\nYou may specify one or more routes in `routes`. You can also add more routes later by using the [add route action](https://docs.hetzner.cloud/#network-actions-add-a-route-to-a-network).\n",
        "tags": [
          "networks"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `network` key contains the network that was just created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_network_response"
                }
              }
            }
          }
        },
        "operationId": "create_network"
      }
    },
    "/networks/{id}": {
      "get": {
        "summary": "Get a Network",
        "description": "Gets a specific network object.",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `network` key contains the network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_network_response"
                }
              }
            }
          }
        },
        "operationId": "get_network"
      },
      "put": {
        "summary": "Update a Network",
        "description": "Updates the network properties.\n\nNote that when updating labels, the network’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n\nNote: if the network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_network_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `network` key contains the updated network",
            "content": {
              "application/json": {
                "example": {
                  "network": {
                    "id": 4711,
                    "name": "new-name",
                    "ip_range": "10.0.0.0/16",
                    "subnets": [
                      {
                        "type": "cloud",
                        "ip_range": "10.0.1.0/24",
                        "network_zone": "eu-central",
                        "gateway": "10.0.0.1"
                      }
                    ],
                    "routes": [
                      {
                        "destination": "10.100.1.0/24",
                        "gateway": "10.0.1.1"
                      }
                    ],
                    "servers": [
                      42
                    ],
                    "load_balancers": [
                      42
                    ],
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_network_response"
                }
              }
            }
          }
        },
        "operationId": "replace_network"
      },
      "delete": {
        "summary": "Delete a Network",
        "description": "Deletes a network. If there are Servers attached they will be detached in the background.\n\nNote: if the network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Network deleted"
          }
        },
        "operationId": "delete_network"
      }
    },
    "/networks/{id}/actions": {
      "get": {
        "summary": "Get all Actions for a Network",
        "description": "Returns all Action objects for a Network. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_network_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "add_subnet",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "list_actions_for_network"
      }
    },
    "/networks/{id}/actions/{action_id}": {
      "get": {
        "summary": "Get an Action for a Network",
        "description": "Returns a specific Action for a Network.",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key contains the Network Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_subnet",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_network_response"
                }
              }
            }
          }
        },
        "operationId": "get_action_for_network"
      }
    },
    "/networks/{id}/actions/add_subnet": {
      "post": {
        "summary": "Add a subnet to a Network",
        "description": "Adds a new subnet object to the Network. If you do not specify an `ip_range` for the subnet we will automatically pick the first available /24 range for you if possible.\n\nNote: if the parent Network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_subnet_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `add_subnet` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_subnet",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_subnet_to_network_response"
                }
              }
            }
          }
        },
        "operationId": "add_subnet_to_network"
      }
    },
    "/networks/{id}/actions/delete_subnet": {
      "post": {
        "summary": "Delete a subnet from a Network",
        "description": "Deletes a single subnet entry from a Network. You cannot delete subnets which still have Servers attached. If you have Servers attached you first need to detach all Servers that use IPs from this subnet before you can delete the subnet.\n\nNote: if the Network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_subnet_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `delete_subnet` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "delete_subnet",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/delete_subnet_from_network_response"
                }
              }
            }
          }
        },
        "operationId": "delete_subnet_from_network"
      }
    },
    "/networks/{id}/actions/add_route": {
      "post": {
        "summary": "Add a route to a Network",
        "description": "Adds a route entry to a Network.\n\nNote: if the Network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/add_route_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `add_route` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "add_route",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/add_route_to_network_response"
                }
              }
            }
          }
        },
        "operationId": "add_route_to_network"
      }
    },
    "/networks/{id}/actions/delete_route": {
      "post": {
        "summary": "Delete a route from a Network",
        "description": "Delete a route entry from a Network.\n\nNote: if the Network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/delete_route_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `delete_route` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "delete_route",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/delete_route_from_network_response"
                }
              }
            }
          }
        },
        "operationId": "delete_route_from_network"
      }
    },
    "/networks/{id}/actions/change_ip_range": {
      "post": {
        "summary": "Change IP range of a Network",
        "description": "Changes the IP range of a Network. IP ranges can only be extended and never shrunk. You can only add IPs at the end of an existing IP range. This means that the IP part of your existing range must stay the same and you can only change its netmask.\n\nFor example if you have a range `10.0.0.0/16` you want to extend then your new range must also start with the IP `10.0.0.0`. Your CIDR netmask `/16` may change to a number that is smaller than `16` thereby increasing the IP range. So valid entries would be `10.0.0.0/15`, `10.0.0.0/14`, `10.0.0.0/13` and so on.\n\nAfter changing the IP range you will have to adjust the routes on your connected Servers by either rebooting them or manually changing the routes to your private Network interface.\n\nNote: if the Network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_ip_range_of_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_ip_range` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_ip_range",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_ip_range_of_network_response"
                }
              }
            }
          }
        },
        "operationId": "change_ip_range_of_network"
      }
    },
    "/networks/{id}/actions/change_protection": {
      "post": {
        "summary": "Change Network Protection",
        "description": "Changes the protection configuration of a Network.\n\nNote: if the Network object changes during the request, the response will be a “conflict” error.\n",
        "tags": [
          "networks"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Network",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_network_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_protection` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_network_protection_response"
                }
              }
            }
          }
        },
        "operationId": "change_network_protection"
      }
    },
    "/pricing": {
      "get": {
        "summary": "Get all prices",
        "description": "Returns prices for all resources available on the platform. VAT and currency of the Project owner are used for calculations.\n\nBoth net and gross prices are included in the response.\n",
        "tags": [
          "pricing"
        ],
        "responses": {
          "200": {
            "description": "The `pricing` key in the reply contains an pricing object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_prices_response"
                }
              }
            }
          }
        },
        "operationId": "list_prices"
      }
    },
    "/servers": {
      "get": {
        "summary": "Get all Servers",
        "description": "Returns all existing Server objects",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter resources by their name. The response will only contain the resources matching the specified name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter resources by labels. The response will only contain resources matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times. The response will only contain Server matching the status",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "initializing",
                "starting",
                "running",
                "stopping",
                "off",
                "deleting",
                "rebuilding",
                "migrating",
                "unknown"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paged array of servers",
            "headers": {
              "x-next": {
                "description": "A link to the next page of responses",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_servers_response"
                }
              }
            }
          }
        },
        "operationId": "list_servers"
      },
      "post": {
        "summary": "Create a Server",
        "description": "Creates a new Server. Returns preliminary information about the Server as well as an Action that covers progress of creation.",
        "tags": [
          "servers"
        ],
        "requestBody": {
          "description": "Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).\n\nFor `server_type` you can either use the ID as listed in `/server_types` or its name.\n\nFor `image` you can either use the ID as listed in `/images` or its name.\n\nIf you want to create the Server in a Location, you must set `location` to the ID or name as listed in `/locations`. This is the recommended way. You can be even more specific by setting `datacenter` to the ID or name as listed in `/datacenters`. However directly specifying the Datacenter is discouraged since supply availability in Datacenters varies greatly and Datacenters may be out of stock for extended periods of time or not serve certain Server types at all.\n\nSome properties like `start_after_create` or `automount` will trigger Actions after the Server is created. Those Actions are listed in the `next_actions` field in the response.\n\nFor accessing your Server we strongly recommend to use SSH keys by passing the respective key IDs in `ssh_keys`. If you do not specify any `ssh_keys` we will generate a root password for you and return it in the response.\n\nPlease note that provided user-data is stored in our systems. While we take measures to protect it we highly recommend that you don’t use it to store passwords or other sensitive information.\n\n#### Call specific error codes\n\n| Code                          | Description                              |\n|-------------------------------|------------------------------------------|\n| `placement_error`             | An error during the placement occurred   |\n",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `server` key in the reply contains a Server object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_server_response"
                },
                "example": {
                  "server": {
                    "id": 42,
                    "name": "my-server",
                    "status": "initializing",
                    "created": "2016-01-30T23:50:00+00:00",
                    "public_net": {
                      "ipv4": {
                        "ip": "1.2.3.4",
                        "blocked": false,
                        "dns_ptr": "server01.example.com"
                      },
                      "ipv6": {
                        "ip": "2001:db8::/64",
                        "blocked": false,
                        "dns_ptr": [
                          {
                            "ip": "2001:db8::1",
                            "dns_ptr": "server.example.com"
                          }
                        ]
                      },
                      "floating_ips": [
                        478
                      ]
                    },
                    "private_net": [
                      {
                        "network": 4711,
                        "ip": "10.0.0.2",
                        "alias_ips": [],
                        "mac_address": "86:00:ff:2a:7d:e1"
                      }
                    ],
                    "server_type": {
                      "id": 1,
                      "name": "cx11",
                      "description": "CX11",
                      "cores": 1,
                      "memory": 1,
                      "disk": 25,
                      "deprecated": true,
                      "prices": [
                        {
                          "location": "fsn1",
                          "price_hourly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          },
                          "price_monthly": {
                            "net": "1.0000000000",
                            "gross": "1.1900000000000000"
                          }
                        }
                      ],
                      "storage_type": "local",
                      "cpu_type": "shared"
                    },
                    "datacenter": {
                      "id": 1,
                      "name": "fsn1-dc8",
                      "description": "Falkenstein 1 DC 8",
                      "location": {
                        "id": 1,
                        "name": "fsn1",
                        "description": "Falkenstein DC Park 1",
                        "country": "DE",
                        "city": "Falkenstein",
                        "latitude": 50.47612,
                        "longitude": 12.370071,
                        "network_zone": "eu-central"
                      },
                      "server_types": {
                        "supported": [
                          1,
                          2,
                          3
                        ],
                        "available": [
                          1,
                          2,
                          3
                        ],
                        "available_for_migration": [
                          1,
                          2,
                          3
                        ]
                      }
                    },
                    "image": {
                      "id": 4711,
                      "type": "snapshot",
                      "status": "available",
                      "name": "ubuntu-20.04",
                      "description": "Ubuntu 20.04 Standard 64 bit",
                      "image_size": 2.3,
                      "disk_size": 10,
                      "created": "2016-01-30T23:50:00+00:00",
                      "created_from": {
                        "id": 1,
                        "name": "Server"
                      },
                      "bound_to": null,
                      "os_flavor": "ubuntu",
                      "os_version": "20.04",
                      "rapid_deploy": false,
                      "protection": {
                        "delete": false
                      },
                      "deprecated": "2018-02-28T00:00:00+00:00",
                      "labels": {}
                    },
                    "iso": {
                      "id": 4711,
                      "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                      "description": "FreeBSD 11.0 x64",
                      "type": "public",
                      "deprecated": "2018-02-28T00:00:00+00:00"
                    },
                    "rescue_enabled": false,
                    "locked": false,
                    "backup_window": "22-02",
                    "outgoing_traffic": 123456,
                    "ingoing_traffic": 123456,
                    "included_traffic": 654321,
                    "protection": {
                      "delete": false,
                      "rebuild": false
                    },
                    "labels": {},
                    "volumes": [],
                    "load_balancers": []
                  },
                  "action": {
                    "id": 1,
                    "command": "create_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  },
                  "next_actions": [
                    {
                      "id": 13,
                      "command": "start_server",
                      "status": "running",
                      "progress": 0,
                      "started": "2016-01-30T23:50:00+00:00",
                      "finished": null,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ],
                  "root_password": "YItygq1v3GYjjMomLaKc"
                }
              }
            }
          }
        },
        "operationId": "create_server"
      }
    },
    "/servers/{id}": {
      "get": {
        "summary": "Get a Server",
        "description": "Returns a specific Server object. The Server must exist inside the Project",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `server` key in the reply contains a Server object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_server_response"
                }
              }
            }
          }
        },
        "operationId": "get_server"
      },
      "put": {
        "summary": "Update a Server",
        "description": "Updates a Server. You can update a Server’s name and a Server’s labels.\nPlease note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).\nAlso note that when updating labels, the Server’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_server_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `server` key in the reply contains the updated Server",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replace_server_response"
                }
              }
            }
          }
        },
        "operationId": "replace_server"
      },
      "delete": {
        "summary": "Delete a Server",
        "description": "Deletes a Server. This immediately removes the Server from your account, and it is no longer accessible.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/delete_server_response"
                }
              }
            }
          }
        },
        "operationId": "delete_server"
      }
    },
    "/servers/{id}/metrics": {
      "get": {
        "summary": "Get Metrics for a Server",
        "description": "Get Metrics for specified Server.\n\nYou must specify the type of metric to get: cpu, disk or network. You can also specify more than one type by comma separation, e.g. cpu,disk.\n\nDepending on the type you will get different time series data\n\n| Type    | Timeseries              | Unit      | Description                                          |\n|---------|-------------------------|-----------|------------------------------------------------------|\n| cpu     | cpu                     | percent   | Percent CPU usage                                    |\n| disk    | disk.0.iops.read        | iop/s     | Number of read IO operations per second              |\n|         | disk.0.iops.write       | iop/s     | Number of write IO operations per second             |\n|         | disk.0.bandwidth.read   | bytes/s   | Bytes read per second                                |\n|         | disk.0.bandwidth.write  | bytes/s   | Bytes written per second                             |\n| network | network.0.pps.in        | packets/s | Public Network interface packets per second received |\n|         | network.0.pps.out       | packets/s | Public Network interface packets per second sent     |\n|         | network.0.bandwidth.in  | bytes/s   | Public Network interface bytes/s received            |\n|         | network.0.bandwidth.out | bytes/s   | Public Network interface bytes/s sent                |\n\nMetrics are available for the last 30 days only.\n\nIf you do not provide the step argument we will automatically adjust it so that a maximum of 200 samples are returned.\n\nWe limit the number of samples returned to a maximum of 500 and will adjust the step parameter accordingly.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of metrics to get",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "cpu",
                "disk",
                "network"
              ]
            }
          },
          {
            "name": "start",
            "in": "query",
            "description": "Start of period to get Metrics for (in ISO-8601 format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "End of period to get Metrics for (in ISO-8601 format)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "step",
            "in": "query",
            "description": "Resolution of results in seconds",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `metrics` key in the reply contains a metrics object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_metrics_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "get_metrics_for_server"
      }
    },
    "/servers/{id}/actions": {
      "get": {
        "summary": "Get all Actions for a Server",
        "description": "Returns all Action objects for a Server. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Resource",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_server_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "start_server",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "list_actions_for_server"
      }
    },
    "/servers/{id}/actions/{action_id}": {
      "get": {
        "summary": "Get an Action for a Server",
        "description": "Returns a specific Action object for a Server.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key in the reply has this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "start_server",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "get_action_for_server"
      }
    },
    "/servers/{id}/actions/poweron": {
      "post": {
        "summary": "Power on a Server",
        "description": "Starts a Server by turning its power on.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "start_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/power_on_server_response"
                }
              }
            }
          }
        },
        "operationId": "power_on_server"
      }
    },
    "/servers/{id}/actions/reboot": {
      "post": {
        "summary": "Soft-reboot a Server",
        "description": "Reboots a Server gracefully by sending an ACPI request. The Server operating system must support ACPI and react to the request, otherwise the Server will not reboot.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "reboot_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/soft_reboot_server_response"
                }
              }
            }
          }
        },
        "operationId": "soft_reboot_server"
      }
    },
    "/servers/{id}/actions/reset": {
      "post": {
        "summary": "Reset a Server",
        "description": "Cuts power to a Server and starts it again. This forcefully stops it without giving the Server operating system time to gracefully stop. This may lead to data loss, it’s equivalent to pulling the power cord and plugging it in again. Reset should only be used when reboot does not work.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "reset_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/reset_server_response"
                }
              }
            }
          }
        },
        "operationId": "reset_server"
      }
    },
    "/servers/{id}/actions/shutdown": {
      "post": {
        "summary": "Shutdown a Server",
        "description": "Shuts down a Server gracefully by sending an ACPI shutdown request. The Server operating system must support ACPI and react to the request, otherwise the Server will not shut down.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "shutdown_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/shutdown_server_response"
                }
              }
            }
          }
        },
        "operationId": "shutdown_server"
      }
    },
    "/servers/{id}/actions/poweroff": {
      "post": {
        "summary": "Power off a Server",
        "description": "Cuts power to the Server. This forcefully stops it without giving the Server operating system time to gracefully stop. May lead to data loss, equivalent to pulling the power cord. Power off should only be used when shutdown does not work.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "stop_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/power_off_server_response"
                }
              }
            }
          }
        },
        "operationId": "power_off_server"
      }
    },
    "/servers/{id}/actions/reset_password": {
      "post": {
        "summary": "Reset root Password of a Server",
        "description": "Resets the root password. Only works for Linux systems that are running the qemu guest agent. Server must be powered on (state `on`) in order for this operation to succeed.\n\nThis will generate a new password for this Server and return it.\n\nIf this does not succeed you can use the rescue system to netboot the Server and manually change your Server password by hand.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `root_password` key in the reply contains the new root password that will be active if the Action succeeds.\n\nThe `action` key in the reply contains an Action object with this structure:\n",
            "content": {
              "application/json": {
                "example": {
                  "root_password": "zCWbFhnu950dUTko5f40",
                  "action": {
                    "id": 13,
                    "command": "reset_password",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/reset_root_password_of_server_response"
                }
              }
            }
          }
        },
        "operationId": "reset_root_password_of_server"
      }
    },
    "/servers/{id}/actions/enable_rescue": {
      "post": {
        "summary": "Enable Rescue Mode for a Server",
        "description": "Enable the Hetzner Rescue System for this Server. The next time a Server with enabled rescue mode boots it will start a special minimal Linux distribution designed for repair and reinstall.\n\nIn case a Server cannot boot on its own you can use this to access a Server’s disks.\n\nRescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.\n\nEnabling rescue mode will not [reboot](https://docs.hetzner.cloud/#server-actions-soft-reboot-a-server) your Server — you will have to do this yourself.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enable_rescue_mode_for_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `root_password` key in the reply contains the root password that can be used to access the booted rescue system.\n\nThe `action` key in the reply contains an Action object with this structure\n",
            "content": {
              "application/json": {
                "example": {
                  "root_password": "zCWbFhnu950dUTko5f40",
                  "action": {
                    "id": 13,
                    "command": "enable_rescue",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/enable_rescue_mode_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "enable_rescue_mode_for_server"
      }
    },
    "/servers/{id}/actions/disable_rescue": {
      "post": {
        "summary": "Disable Rescue Mode for a Server",
        "description": "Disables the Hetzner Rescue System for a Server. This makes a Server start from its disks on next reboot.\n\nRescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.\n\nDisabling rescue mode will not reboot your Server — you will have to do this yourself.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "disable_rescue",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/disable_rescue_mode_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "disable_rescue_mode_for_server"
      }
    },
    "/servers/{id}/actions/create_image": {
      "post": {
        "summary": "Create Image from a Server",
        "description": "Creates an Image (snapshot) from a Server by copying the contents of its disks. This creates a snapshot of the current state of the disk and copies it into an Image. If the Server is currently running you must make sure that its disk content is consistent. Otherwise, the created Image may not be readable.\n\nTo make sure disk content is consistent, we recommend to shut down the Server prior to creating an Image.\n\nYou can either create a `backup` Image that is bound to the Server and therefore will be deleted when the Server is deleted, or you can create an `snapshot` Image which is completely independent of the Server it was created from and will survive Server deletion. Backup Images are only available when the backup option is enabled for the Server. Snapshot Images are billed on a per GB basis.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_image_from_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `image` key in the reply contains an the created Image, which is an object with this structure\n\nThe `action` key in the reply contains an Action object with this structure\n",
            "content": {
              "application/json": {
                "example": {
                  "image": {
                    "id": 4711,
                    "type": "snapshot",
                    "status": "creating",
                    "name": null,
                    "description": "my image",
                    "image_size": 2.3,
                    "disk_size": 10,
                    "created": "2016-01-30T23:50:00+00:00",
                    "created_from": {
                      "id": 1,
                      "name": "Server"
                    },
                    "bound_to": null,
                    "os_flavor": "ubuntu",
                    "os_version": "20.04",
                    "rapid_deploy": false,
                    "protection": {
                      "delete": false
                    },
                    "deprecated": "2018-02-28T00:00:00+00:00",
                    "labels": {}
                  },
                  "action": {
                    "id": 13,
                    "command": "create_image",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/create_image_from_server_response"
                }
              }
            }
          }
        },
        "operationId": "create_image_from_server"
      }
    },
    "/servers/{id}/actions/rebuild": {
      "post": {
        "summary": "Rebuild a Server from an Image",
        "description": "Rebuilds a Server overwriting its disk with the content of an Image, thereby **destroying all data** on the target Server\n\nThe Image can either be one you have created earlier (`backup` or `snapshot` Image) or it can be a completely fresh `system` Image provided by us. You can get a list of all available Images with `GET /images`.\n\nYour Server will automatically be powered off before the rebuild command executes.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "To select which Image to rebuild from you can either pass an ID or a name as the `image` argument. Passing a name only works for `system` Images since the other Image types do not have a name set.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/rebuild_server_from_image_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "rebuild_server",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  },
                  "root_password": null
                },
                "schema": {
                  "$ref": "#/components/schemas/rebuild_server_from_image_response"
                }
              }
            }
          }
        },
        "operationId": "rebuild_server_from_image"
      }
    },
    "/servers/{id}/actions/change_type": {
      "post": {
        "summary": "Change the Type of a Server",
        "description": "Changes the type (Cores, RAM and disk sizes) of a Server.\n\nServer must be powered off for this command to succeed.\n\nThis copies the content of its disk, and starts it again.\n\nYou can only migrate to Server types with the same `storage_type` and equal or bigger disks. Shrinking disks is not possible as it might destroy data.\n\nIf the disk gets upgraded, the Server type can not be downgraded any more. If you plan to downgrade the Server type, set `upgrade_disk` to `false`.\n\n#### Call specific error codes\n\n| Code                          | Description                                                          |\n|-------------------------------|----------------------------------------------------------------------|\n| `invalid_server_type`         | The server type does not fit for the given server or is deprecated   |\n| `server_not_stopped`          | The action requires a stopped server                                 |\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_type_of_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_server_type",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_type_of_server_response"
                }
              }
            }
          }
        },
        "operationId": "change_type_of_server"
      }
    },
    "/servers/{id}/actions/enable_backup": {
      "post": {
        "summary": "Enable and Configure Backups for a Server",
        "description": "Enables and configures the automatic daily backup option for the Server. Enabling automatic backups will increase the price of the Server by 20%. In return, you will get seven slots where Images of type backup can be stored.\n\nBackups are automatically created daily.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "enable_backup",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/enable_and_configure_backups_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "enable_and_configure_backups_for_server"
      }
    },
    "/servers/{id}/actions/disable_backup": {
      "post": {
        "summary": "Disable Backups for a Server",
        "description": "Disables the automatic backup option and deletes all existing Backups for a Server. No more additional charges for backups will be made.\n\nCaution: This immediately removes all existing backups for the Server!\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "disable_backup",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/disable_backups_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "disable_backups_for_server"
      }
    },
    "/servers/{id}/actions/attach_iso": {
      "post": {
        "summary": "Attach an ISO to a Server",
        "description": "Attaches an ISO to a Server. The Server will immediately see it as a new disk. An already attached ISO will automatically be detached before the new ISO is attached.\n\nServers with attached ISOs have a modified boot order: They will try to boot from the ISO first before falling back to hard disk.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_iso_to_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_iso",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_iso_to_server_response"
                }
              }
            }
          }
        },
        "operationId": "attach_iso_to_server"
      }
    },
    "/servers/{id}/actions/detach_iso": {
      "post": {
        "summary": "Detach an ISO from a Server",
        "description": "Detaches an ISO from a Server. In case no ISO Image is attached to the Server, the status of the returned Action is immediately set to `success`",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_iso",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_iso_from_server_response"
                }
              }
            }
          }
        },
        "operationId": "detach_iso_from_server"
      }
    },
    "/servers/{id}/actions/change_dns_ptr": {
      "post": {
        "summary": "Change reverse DNS entry for this Server",
        "description": "Changes the hostname that will appear when getting the hostname belonging to the primary IPs (IPv4 and IPv6) of this Server.\n\nFloating IPs assigned to the Server are not affected by this.\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Select the IP address for which to change the DNS entry by passing `ip`. It can be either IPv4 or IPv6. The target hostname is set by passing `dns_ptr`.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_dns_ptr",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_reverse_dns_entry_for_this_server_response"
                }
              }
            }
          }
        },
        "operationId": "change_reverse_dns_entry_for_this_server"
      }
    },
    "/servers/{id}/actions/change_protection": {
      "post": {
        "summary": "Change Server Protection",
        "description": "Changes the protection configuration of the Server.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_server_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_server_protection_response"
                }
              }
            }
          }
        },
        "operationId": "change_server_protection"
      }
    },
    "/servers/{id}/actions/request_console": {
      "post": {
        "summary": "Request Console for a Server",
        "description": "Requests credentials for remote access via VNC over websocket to keyboard, monitor, and mouse for a Server. The provided URL is valid for 1 minute, after this period a new url needs to be created to connect to the Server. How long the connection is open after the initial connect is not subject to this timeout.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "wss_url": "wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c",
                  "password": "9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x",
                  "action": {
                    "id": 13,
                    "command": "request_console",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/request_console_for_server_response"
                }
              }
            }
          }
        },
        "operationId": "request_console_for_server"
      }
    },
    "/servers/{id}/actions/attach_to_network": {
      "post": {
        "summary": "Attach a Server to a Network",
        "description": "Attaches a Server to a network. This will complement the fixed public Server interface by adding an additional ethernet interface to the Server which is connected to the specified network.\n\nThe Server will get an IP auto assigned from a subnet of type `server` in the same `network_zone`.\n\nUsing the `alias_ips` attribute you can also define one or more additional IPs to the Servers. Please note that you will have to configure these IPs by hand on your Server since only the primary IP will be given out by DHCP.\n\n**Call specific error codes**\n\n| Code                             | Description                                                           |\n|----------------------------------|-----------------------------------------------------------------------|\n| `server_already_attached`        | The server is already attached to the network                         |\n| `ip_not_available`               | The provided Network IP is not available                              |\n| `no_subnet_available`            | No Subnet or IP is available for the Server within the network        |\n| `networks_overlap`               | The network IP range overlaps with one of the server networks         |\n",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_server_to_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_to_network",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_server_to_network_response"
                }
              }
            }
          }
        },
        "operationId": "attach_server_to_network"
      }
    },
    "/servers/{id}/actions/detach_from_network": {
      "post": {
        "summary": "Detach a Server from a Network",
        "description": "Detaches a Server from a network. The interface for this network will vanish.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/detach_server_from_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_from_network",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_server_from_network_response"
                }
              }
            }
          }
        },
        "operationId": "detach_server_from_network"
      }
    },
    "/servers/{id}/actions/change_alias_ips": {
      "post": {
        "summary": "Change alias IPs of a Network",
        "description": "Changes the alias IPs of an already attached Network. Note that the existing aliases for the specified Network will be replaced with these provided in the request body. So if you want to add an alias IP, you have to provide the existing ones from the Network plus the new alias IP in the request body.",
        "tags": [
          "servers"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Server",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_alias_ips_of_network_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key in the reply contains an Action object with this structure",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_alias_ips",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 4711,
                        "type": "network"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_alias_ips_of_network_response"
                }
              }
            }
          }
        },
        "operationId": "change_alias_ips_of_network"
      }
    },
    "/server_types": {
      "get": {
        "summary": "Get all Server Types",
        "description": "Gets all Server type objects.",
        "tags": [
          "server_types"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter Server types by their name. The response will only contain the Server type matching the specified name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `server_types` key in the reply contains an array of Server type objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_server_types_response"
                }
              }
            }
          }
        },
        "operationId": "list_server_types"
      }
    },
    "/server_types/{id}": {
      "get": {
        "summary": "Get a Server Type",
        "description": "Gets a specific Server type object.",
        "tags": [
          "server_types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of Server Type",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `server_type` key in the reply contains a Server type object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_server_type_response"
                }
              }
            }
          }
        },
        "operationId": "get_server_type"
      }
    },
    "/ssh_keys": {
      "get": {
        "summary": "Get all SSH keys",
        "description": "Returns all SSH key objects.",
        "tags": [
          "ssh_keys"
        ],
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter resources by their name. The response will only contain the resources matching the specified name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fingerprint",
            "in": "query",
            "description": "Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter resources by labels. The response will only contain resources matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `ssh_keys` key in the reply contains an array of SSH key objects with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_ssh_keys_response"
                }
              }
            }
          }
        },
        "operationId": "list_ssh_keys"
      },
      "post": {
        "summary": "Create an SSH key",
        "description": "Creates a new SSH key with the given `name` and `public_key`. Once an SSH key is created, it can be used in other calls such as creating Servers.",
        "tags": [
          "ssh_keys"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/create_ssh_key_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `ssh_key` key in the reply contains the object that was just created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/create_ssh_key_response"
                }
              }
            }
          }
        },
        "operationId": "create_ssh_key"
      }
    },
    "/ssh_keys/{id}": {
      "get": {
        "summary": "Get a SSH key",
        "description": "Returns a specific SSH key object.",
        "tags": [
          "ssh_keys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSH key",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `ssh_key` key in the reply contains an SSH key object with this structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_ssh_key_response"
                }
              }
            }
          }
        },
        "operationId": "get_ssh_key"
      },
      "put": {
        "summary": "Update an SSH key",
        "description": "Updates an SSH key. You can update an SSH key name and an SSH key labels.\n\nPlease note that when updating labels, the SSH key current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n",
        "tags": [
          "ssh_keys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_ssh_key_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `ssh_key` key in the reply contains the modified SSH key object with the new description",
            "content": {
              "application/json": {
                "example": {
                  "ssh_key": {
                    "id": 2323,
                    "name": "My ssh key",
                    "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                    "public_key": "ssh-rsa AAAjjk76kgf...Xt",
                    "labels": {
                      "labelkey": "value"
                    },
                    "created": "2016-01-30T23:50:00+00:00"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_ssh_key_response"
                }
              }
            }
          }
        },
        "operationId": "replace_ssh_key"
      },
      "delete": {
        "summary": "Delete an SSH key",
        "description": "Deletes an SSH key. It cannot be used anymore.",
        "tags": [
          "ssh_keys"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "SSH key deleted"
          }
        },
        "operationId": "delete_ssh_key"
      }
    },
    "/volumes": {
      "get": {
        "summary": "Get all Volumes",
        "description": "Gets all existing Volumes that you have available.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times. The response will only contain Volumes matching the status.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "available",
                "creating"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "name",
                "name:asc",
                "name:desc",
                "created",
                "created:asc",
                "created:desc"
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Can be used to filter resources by their name. The response will only contain the resources matching the specified name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label_selector",
            "in": "query",
            "description": "Can be used to filter resources by labels. The response will only contain resources matching the label selector.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `volumes` key contains a list of volumes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_volumes_response"
                }
              }
            }
          }
        },
        "operationId": "list_volumes"
      },
      "post": {
        "summary": "Create a Volume",
        "description": "Creates a new Volume attached to a Server. If you want to create a Volume that is not attached to a Server, you need to provide the `location` key instead of `server`. This can be either the ID or the name of the Location this Volume will be created in. Note that a Volume can be attached to a Server only in the same Location as the Volume itself.\n\nSpecifying the Server during Volume creation will automatically attach the Volume to that Server after it has been initialized. In that case, the `next_actions` key in the response is an array which contains a single `attach_volume` action.\n\nThe minimum Volume size is 10GB and the maximum size is 10TB (10240GB).\n\nA volume’s name can consist of alphanumeric characters, dashes, underscores, and dots, but has to start and end with an alphanumeric character. The total length is limited to 64 characters. Volume names must be unique per Project.\n\n#### Call specific error codes\n\n| Code                                | Description                                                          |\n|-------------------------------------|----------------------------------------------------------------------|\n| `no_space_left_in_location`         | There is no volume space left in the given location                    |\n",
        "tags": [
          "volumes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "size": 42,
                "name": "test-database",
                "labels": {
                  "labelkey": "value"
                },
                "location": "nbg1",
                "automount": false,
                "format": "xfs"
              },
              "schema": {
                "$ref": "#/components/schemas/create_volume_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `volume` key contains the Volume that was just created\n\nThe `action` key contains the Action tracking Volume creation\n",
            "content": {
              "application/json": {
                "example": {
                  "volume": {
                    "id": 4711,
                    "created": "2016-01-30T23:50:11+00:00",
                    "name": "database-storage",
                    "server": 12,
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "size": 42,
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "protection": {
                      "delete": false
                    },
                    "labels": {},
                    "status": "available",
                    "format": "xfs"
                  },
                  "action": {
                    "id": 13,
                    "command": "create_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  },
                  "next_actions": [
                    {
                      "id": 13,
                      "command": "attach_volume",
                      "status": "running",
                      "progress": 0,
                      "started": "2016-01-30T23:50:00+00:00",
                      "finished": null,
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 554,
                          "type": "volume"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/create_volume_response"
                }
              }
            }
          }
        },
        "operationId": "create_volume"
      }
    },
    "/volumes/{id}": {
      "get": {
        "summary": "Get a Volume",
        "description": "Gets a specific Volume object.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `volume` key contains the volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/get_volume_response"
                }
              }
            }
          }
        },
        "operationId": "get_volume"
      },
      "put": {
        "summary": "Update a Volume",
        "description": "Updates the Volume properties.\n\nNote that when updating labels, the volume’s current set of labels will be replaced with the labels provided in the request body. So, for example, if you want to add a new label, you have to provide all existing labels plus the new label in the request body.\n",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/replace_volume_request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The `volume` key contains the updated volume",
            "content": {
              "application/json": {
                "example": {
                  "volume": {
                    "id": 4711,
                    "created": "2016-01-30T23:50:11+00:00",
                    "name": "database-storage",
                    "server": 12,
                    "location": {
                      "id": 1,
                      "name": "fsn1",
                      "description": "Falkenstein DC Park 1",
                      "country": "DE",
                      "city": "Falkenstein",
                      "latitude": 50.47612,
                      "longitude": 12.370071,
                      "network_zone": "eu-central"
                    },
                    "size": 42,
                    "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                    "protection": {
                      "delete": false
                    },
                    "labels": {
                      "labelkey": "value"
                    },
                    "status": "available",
                    "format": "xfs"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/replace_volume_response"
                }
              }
            }
          }
        },
        "operationId": "replace_volume"
      },
      "delete": {
        "summary": "Delete a Volume",
        "description": "Deletes a volume. All Volume data is irreversibly destroyed. The Volume must not be attached to a Server and it must not have delete protection enabled.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Volume deleted"
          }
        },
        "operationId": "delete_volume"
      }
    },
    "/volumes/{id}/actions": {
      "get": {
        "summary": "Get all Actions for a Volume",
        "description": "Returns all Action objects for a Volume. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Can be used multiple times.",
            "required": false,
            "schema": {
              "title": "ParameterSort",
              "type": "string",
              "enum": [
                "id",
                "id:asc",
                "id:desc",
                "command",
                "command:asc",
                "command:desc",
                "status",
                "status:asc",
                "status:desc",
                "progress",
                "progress:asc",
                "progress:desc",
                "started",
                "started:asc",
                "started:desc",
                "finished",
                "finished:asc",
                "finished:desc"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Can be used multiple times, the response will contain only Actions with specified statuses",
            "required": false,
            "schema": {
              "title": "ParameterStatus",
              "type": "string",
              "enum": [
                "running",
                "success",
                "error"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `actions` key contains a list of Actions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/list_actions_for_volume_response"
                },
                "example": {
                  "actions": [
                    {
                      "id": 13,
                      "command": "attach_volume",
                      "status": "success",
                      "progress": 100,
                      "started": "2016-01-30T23:55:00+00:00",
                      "finished": "2016-01-30T23:56:00+00:00",
                      "resources": [
                        {
                          "id": 42,
                          "type": "server"
                        },
                        {
                          "id": 13,
                          "type": "volume"
                        }
                      ],
                      "error": {
                        "code": "action_failed",
                        "message": "Action failed"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "list_actions_for_volume"
      }
    },
    "/volumes/{id}/actions/{action_id}": {
      "get": {
        "summary": "Get an Action for a Volume",
        "description": "Returns a specific Action for a Volume.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "ID of the Action",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The `action` key contains the Volume Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_volume",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/get_action_for_volume_response"
                }
              }
            }
          }
        },
        "operationId": "get_action_for_volume"
      }
    },
    "/volumes/{id}/actions/attach": {
      "post": {
        "summary": "Attach Volume to a Server",
        "description": "Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attach_volume_to_server_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `attach_volume` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "attach_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 43,
                        "type": "server"
                      },
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/attach_volume_to_server_response"
                }
              }
            }
          }
        },
        "operationId": "attach_volume_to_server"
      }
    },
    "/volumes/{id}/actions/detach": {
      "post": {
        "summary": "Detach Volume",
        "description": "Detaches a Volume from the Server it’s attached to. You may attach it to a Server again at a later time.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The `action` key contains the `detach_volume` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "detach_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/detach_volume_response"
                }
              }
            }
          }
        },
        "operationId": "detach_volume"
      }
    },
    "/volumes/{id}/actions/resize": {
      "post": {
        "summary": "Resize Volume",
        "description": "Changes the size of a Volume. Note that downsizing a Volume is not possible.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resize_volume_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `resize_volume` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "resize_volume",
                    "status": "running",
                    "progress": 0,
                    "started": "2016-01-30T23:50:00+00:00",
                    "finished": null,
                    "resources": [
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/resize_volume_response"
                }
              }
            }
          }
        },
        "operationId": "resize_volume"
      }
    },
    "/volumes/{id}/actions/change_protection": {
      "post": {
        "summary": "Change Volume Protection",
        "description": "Changes the protection configuration of a Volume.",
        "tags": [
          "volumes"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Volume",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/change_volume_protection_request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The `action` key contains the `change_protection` Action",
            "content": {
              "application/json": {
                "example": {
                  "action": {
                    "id": 13,
                    "command": "change_protection",
                    "status": "success",
                    "progress": 100,
                    "started": "2016-01-30T23:55:00+00:00",
                    "finished": "2016-01-30T23:56:00+00:00",
                    "resources": [
                      {
                        "id": 42,
                        "type": "server"
                      },
                      {
                        "id": 554,
                        "type": "volume"
                      }
                    ],
                    "error": {
                      "code": "action_failed",
                      "message": "Action failed"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/change_volume_protection_response"
                }
              }
            }
          }
        },
        "operationId": "change_volume_protection"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}